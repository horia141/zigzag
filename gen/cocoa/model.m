/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "model.h"

@implementation common.modelUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id client_type: (int) client_type datetime_joined_ts: (int32_t) datetime_joined_ts
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __client_type = client_type;
  __client_type_isset = YES;
  __datetime_joined_ts = datetime_joined_ts;
  __datetime_joined_ts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_type"])
  {
    __client_type = [decoder decodeIntForKey: @"client_type"];
    __client_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"datetime_joined_ts"])
  {
    __datetime_joined_ts = [decoder decodeInt32ForKey: @"datetime_joined_ts"];
    __datetime_joined_ts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__client_type_isset)
  {
    [encoder encodeInt: __client_type forKey: @"client_type"];
  }
  if (__datetime_joined_ts_isset)
  {
    [encoder encodeInt32: __datetime_joined_ts forKey: @"datetime_joined_ts"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int) client_type {
  return __client_type;
}

- (void) setClient_type: (int) client_type {
  __client_type = client_type;
  __client_type_isset = YES;
}

- (BOOL) client_typeIsSet {
  return __client_type_isset;
}

- (void) unsetClient_type {
  __client_type_isset = NO;
}

- (int32_t) datetime_joined_ts {
  return __datetime_joined_ts;
}

- (void) setDatetime_joined_ts: (int32_t) datetime_joined_ts {
  __datetime_joined_ts = datetime_joined_ts;
  __datetime_joined_ts_isset = YES;
}

- (BOOL) datetime_joined_tsIsSet {
  return __datetime_joined_ts_isset;
}

- (void) unsetDatetime_joined_ts {
  __datetime_joined_ts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClient_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDatetime_joined_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__client_type_isset) {
    [outProtocol writeFieldBeginWithName: @"client_type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __client_type];
    [outProtocol writeFieldEnd];
  }
  if (__datetime_joined_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"datetime_joined_ts" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __datetime_joined_ts];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__client_type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'client_type' is not set."];
  }
  if (!__datetime_joined_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'datetime_joined_ts' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelUser("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",client_type:"];
  [ms appendFormat: @"%i", __client_type];
  [ms appendString: @",datetime_joined_ts:"];
  [ms appendFormat: @"%i", __datetime_joined_ts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelTileData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWidth: (int32_t) width height: (int32_t) height uri_path: (NSString *) uri_path
{
  self = [super init];
  __width = width;
  __width_isset = YES;
  __height = height;
  __height_isset = YES;
  __uri_path = [uri_path retain_stub];
  __uri_path_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"uri_path"])
  {
    __uri_path = [[decoder decodeObjectForKey: @"uri_path"] retain_stub];
    __uri_path_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
  if (__uri_path_isset)
  {
    [encoder encodeObject: __uri_path forKey: @"uri_path"];
  }
}

- (void) dealloc
{
  [__uri_path release_stub];
  [super dealloc_stub];
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (NSString *) uri_path {
  return [[__uri_path retain_stub] autorelease_stub];
}

- (void) setUri_path: (NSString *) uri_path {
  [uri_path retain_stub];
  [__uri_path release_stub];
  __uri_path = uri_path;
  __uri_path_isset = YES;
}

- (BOOL) uri_pathIsSet {
  return __uri_path_isset;
}

- (void) unsetUri_path {
  [__uri_path release_stub];
  __uri_path = nil;
  __uri_path_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUri_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TileData"];
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  if (__uri_path_isset) {
    if (__uri_path != nil) {
      [outProtocol writeFieldBeginWithName: @"uri_path" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __uri_path];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
  if (!__height_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'height' is not set."];
  }
  if (!__uri_path_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uri_path' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelTileData("];
  [ms appendString: @"width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @",uri_path:"];
  [ms appendFormat: @"\"%@\"", __uri_path];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelTooBigPhotoData

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TooBigPhotoData"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelTooBigPhotoData("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelImagePhotoData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTiles: (NSMutableArray *) tiles
{
  self = [super init];
  __tiles = [tiles retain_stub];
  __tiles_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tiles"])
  {
    __tiles = [[decoder decodeObjectForKey: @"tiles"] retain_stub];
    __tiles_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tiles_isset)
  {
    [encoder encodeObject: __tiles forKey: @"tiles"];
  }
}

- (void) dealloc
{
  [__tiles release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) tiles {
  return [[__tiles retain_stub] autorelease_stub];
}

- (void) setTiles: (NSMutableArray *) tiles {
  [tiles retain_stub];
  [__tiles release_stub];
  __tiles = tiles;
  __tiles_isset = YES;
}

- (BOOL) tilesIsSet {
  return __tiles_isset;
}

- (void) unsetTiles {
  [__tiles release_stub];
  __tiles = nil;
  __tiles_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            common.modelTileData *_elem2 = [[common.modelTileData alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setTiles: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ImagePhotoData"];
  if (__tiles_isset) {
    if (__tiles != nil) {
      [outProtocol writeFieldBeginWithName: @"tiles" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__tiles count]];
        int idx4;
        for (idx4 = 0; idx4 < [__tiles count]; idx4++)
        {
          [[__tiles objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__tiles_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'tiles' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelImagePhotoData("];
  [ms appendString: @"tiles:"];
  [ms appendFormat: @"%@", __tiles];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelVideoPhotoData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFirst_frame: (common.modelTileData *) first_frame video: (common.modelTileData *) video frames_per_sec: (int32_t) frames_per_sec time_between_frames_ms: (int32_t) time_between_frames_ms
{
  self = [super init];
  __first_frame = [first_frame retain_stub];
  __first_frame_isset = YES;
  __video = [video retain_stub];
  __video_isset = YES;
  __frames_per_sec = frames_per_sec;
  __frames_per_sec_isset = YES;
  __time_between_frames_ms = time_between_frames_ms;
  __time_between_frames_ms_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"first_frame"])
  {
    __first_frame = [[decoder decodeObjectForKey: @"first_frame"] retain_stub];
    __first_frame_isset = YES;
  }
  if ([decoder containsValueForKey: @"video"])
  {
    __video = [[decoder decodeObjectForKey: @"video"] retain_stub];
    __video_isset = YES;
  }
  if ([decoder containsValueForKey: @"frames_per_sec"])
  {
    __frames_per_sec = [decoder decodeInt32ForKey: @"frames_per_sec"];
    __frames_per_sec_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_between_frames_ms"])
  {
    __time_between_frames_ms = [decoder decodeInt32ForKey: @"time_between_frames_ms"];
    __time_between_frames_ms_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__first_frame_isset)
  {
    [encoder encodeObject: __first_frame forKey: @"first_frame"];
  }
  if (__video_isset)
  {
    [encoder encodeObject: __video forKey: @"video"];
  }
  if (__frames_per_sec_isset)
  {
    [encoder encodeInt32: __frames_per_sec forKey: @"frames_per_sec"];
  }
  if (__time_between_frames_ms_isset)
  {
    [encoder encodeInt32: __time_between_frames_ms forKey: @"time_between_frames_ms"];
  }
}

- (void) dealloc
{
  [__first_frame release_stub];
  [__video release_stub];
  [super dealloc_stub];
}

- (common.modelTileData *) first_frame {
  return [[__first_frame retain_stub] autorelease_stub];
}

- (void) setFirst_frame: (common.modelTileData *) first_frame {
  [first_frame retain_stub];
  [__first_frame release_stub];
  __first_frame = first_frame;
  __first_frame_isset = YES;
}

- (BOOL) first_frameIsSet {
  return __first_frame_isset;
}

- (void) unsetFirst_frame {
  [__first_frame release_stub];
  __first_frame = nil;
  __first_frame_isset = NO;
}

- (common.modelTileData *) video {
  return [[__video retain_stub] autorelease_stub];
}

- (void) setVideo: (common.modelTileData *) video {
  [video retain_stub];
  [__video release_stub];
  __video = video;
  __video_isset = YES;
}

- (BOOL) videoIsSet {
  return __video_isset;
}

- (void) unsetVideo {
  [__video release_stub];
  __video = nil;
  __video_isset = NO;
}

- (int32_t) frames_per_sec {
  return __frames_per_sec;
}

- (void) setFrames_per_sec: (int32_t) frames_per_sec {
  __frames_per_sec = frames_per_sec;
  __frames_per_sec_isset = YES;
}

- (BOOL) frames_per_secIsSet {
  return __frames_per_sec_isset;
}

- (void) unsetFrames_per_sec {
  __frames_per_sec_isset = NO;
}

- (int32_t) time_between_frames_ms {
  return __time_between_frames_ms;
}

- (void) setTime_between_frames_ms: (int32_t) time_between_frames_ms {
  __time_between_frames_ms = time_between_frames_ms;
  __time_between_frames_ms_isset = YES;
}

- (BOOL) time_between_frames_msIsSet {
  return __time_between_frames_ms_isset;
}

- (void) unsetTime_between_frames_ms {
  __time_between_frames_ms_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          common.modelTileData *fieldValue = [[common.modelTileData alloc] init];
          [fieldValue read: inProtocol];
          [self setFirst_frame: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          common.modelTileData *fieldValue = [[common.modelTileData alloc] init];
          [fieldValue read: inProtocol];
          [self setVideo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFrames_per_sec: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_between_frames_ms: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VideoPhotoData"];
  if (__first_frame_isset) {
    if (__first_frame != nil) {
      [outProtocol writeFieldBeginWithName: @"first_frame" type: TType_STRUCT fieldID: 1];
      [__first_frame write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__video_isset) {
    if (__video != nil) {
      [outProtocol writeFieldBeginWithName: @"video" type: TType_STRUCT fieldID: 2];
      [__video write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__frames_per_sec_isset) {
    [outProtocol writeFieldBeginWithName: @"frames_per_sec" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __frames_per_sec];
    [outProtocol writeFieldEnd];
  }
  if (__time_between_frames_ms_isset) {
    [outProtocol writeFieldBeginWithName: @"time_between_frames_ms" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __time_between_frames_ms];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__first_frame_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'first_frame' is not set."];
  }
  if (!__video_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'video' is not set."];
  }
  if (!__frames_per_sec_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'frames_per_sec' is not set."];
  }
  if (!__time_between_frames_ms_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'time_between_frames_ms' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelVideoPhotoData("];
  [ms appendString: @"first_frame:"];
  [ms appendFormat: @"%@", __first_frame];
  [ms appendString: @",video:"];
  [ms appendFormat: @"%@", __video];
  [ms appendString: @",frames_per_sec:"];
  [ms appendFormat: @"%i", __frames_per_sec];
  [ms appendString: @",time_between_frames_ms:"];
  [ms appendFormat: @"%i", __time_between_frames_ms];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelPhotoData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToo_big_photo_data: (common.modelTooBigPhotoData *) too_big_photo_data image_photo_data: (common.modelImagePhotoData *) image_photo_data video_photo_data: (common.modelVideoPhotoData *) video_photo_data
{
  self = [super init];
  __too_big_photo_data = [too_big_photo_data retain_stub];
  __too_big_photo_data_isset = YES;
  __image_photo_data = [image_photo_data retain_stub];
  __image_photo_data_isset = YES;
  __video_photo_data = [video_photo_data retain_stub];
  __video_photo_data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"too_big_photo_data"])
  {
    __too_big_photo_data = [[decoder decodeObjectForKey: @"too_big_photo_data"] retain_stub];
    __too_big_photo_data_isset = YES;
  }
  if ([decoder containsValueForKey: @"image_photo_data"])
  {
    __image_photo_data = [[decoder decodeObjectForKey: @"image_photo_data"] retain_stub];
    __image_photo_data_isset = YES;
  }
  if ([decoder containsValueForKey: @"video_photo_data"])
  {
    __video_photo_data = [[decoder decodeObjectForKey: @"video_photo_data"] retain_stub];
    __video_photo_data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__too_big_photo_data_isset)
  {
    [encoder encodeObject: __too_big_photo_data forKey: @"too_big_photo_data"];
  }
  if (__image_photo_data_isset)
  {
    [encoder encodeObject: __image_photo_data forKey: @"image_photo_data"];
  }
  if (__video_photo_data_isset)
  {
    [encoder encodeObject: __video_photo_data forKey: @"video_photo_data"];
  }
}

- (void) dealloc
{
  [__too_big_photo_data release_stub];
  [__image_photo_data release_stub];
  [__video_photo_data release_stub];
  [super dealloc_stub];
}

- (common.modelTooBigPhotoData *) too_big_photo_data {
  return [[__too_big_photo_data retain_stub] autorelease_stub];
}

- (void) setToo_big_photo_data: (common.modelTooBigPhotoData *) too_big_photo_data {
  [too_big_photo_data retain_stub];
  [__too_big_photo_data release_stub];
  __too_big_photo_data = too_big_photo_data;
  __too_big_photo_data_isset = YES;
}

- (BOOL) too_big_photo_dataIsSet {
  return __too_big_photo_data_isset;
}

- (void) unsetToo_big_photo_data {
  [__too_big_photo_data release_stub];
  __too_big_photo_data = nil;
  __too_big_photo_data_isset = NO;
}

- (common.modelImagePhotoData *) image_photo_data {
  return [[__image_photo_data retain_stub] autorelease_stub];
}

- (void) setImage_photo_data: (common.modelImagePhotoData *) image_photo_data {
  [image_photo_data retain_stub];
  [__image_photo_data release_stub];
  __image_photo_data = image_photo_data;
  __image_photo_data_isset = YES;
}

- (BOOL) image_photo_dataIsSet {
  return __image_photo_data_isset;
}

- (void) unsetImage_photo_data {
  [__image_photo_data release_stub];
  __image_photo_data = nil;
  __image_photo_data_isset = NO;
}

- (common.modelVideoPhotoData *) video_photo_data {
  return [[__video_photo_data retain_stub] autorelease_stub];
}

- (void) setVideo_photo_data: (common.modelVideoPhotoData *) video_photo_data {
  [video_photo_data retain_stub];
  [__video_photo_data release_stub];
  __video_photo_data = video_photo_data;
  __video_photo_data_isset = YES;
}

- (BOOL) video_photo_dataIsSet {
  return __video_photo_data_isset;
}

- (void) unsetVideo_photo_data {
  [__video_photo_data release_stub];
  __video_photo_data = nil;
  __video_photo_data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          common.modelTooBigPhotoData *fieldValue = [[common.modelTooBigPhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setToo_big_photo_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          common.modelImagePhotoData *fieldValue = [[common.modelImagePhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setImage_photo_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          common.modelVideoPhotoData *fieldValue = [[common.modelVideoPhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setVideo_photo_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhotoData"];
  if (__too_big_photo_data_isset) {
    if (__too_big_photo_data != nil) {
      [outProtocol writeFieldBeginWithName: @"too_big_photo_data" type: TType_STRUCT fieldID: 1];
      [__too_big_photo_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_photo_data_isset) {
    if (__image_photo_data != nil) {
      [outProtocol writeFieldBeginWithName: @"image_photo_data" type: TType_STRUCT fieldID: 2];
      [__image_photo_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__video_photo_data_isset) {
    if (__video_photo_data != nil) {
      [outProtocol writeFieldBeginWithName: @"video_photo_data" type: TType_STRUCT fieldID: 3];
      [__video_photo_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelPhotoData("];
  [ms appendString: @"too_big_photo_data:"];
  [ms appendFormat: @"%@", __too_big_photo_data];
  [ms appendString: @",image_photo_data:"];
  [ms appendFormat: @"%@", __image_photo_data];
  [ms appendString: @",video_photo_data:"];
  [ms appendFormat: @"%@", __video_photo_data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelPhotoDescription

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubtitle: (NSString *) subtitle description: (NSString *) description source_uri: (NSString *) source_uri photo_data: (common.modelPhotoData *) photo_data
{
  self = [super init];
  __subtitle = [subtitle retain_stub];
  __subtitle_isset = YES;
  __description = [description retain_stub];
  __description_isset = YES;
  __source_uri = [source_uri retain_stub];
  __source_uri_isset = YES;
  __photo_data = [photo_data retain_stub];
  __photo_data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"subtitle"])
  {
    __subtitle = [[decoder decodeObjectForKey: @"subtitle"] retain_stub];
    __subtitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"description"])
  {
    __description = [[decoder decodeObjectForKey: @"description"] retain_stub];
    __description_isset = YES;
  }
  if ([decoder containsValueForKey: @"source_uri"])
  {
    __source_uri = [[decoder decodeObjectForKey: @"source_uri"] retain_stub];
    __source_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_data"])
  {
    __photo_data = [[decoder decodeObjectForKey: @"photo_data"] retain_stub];
    __photo_data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__subtitle_isset)
  {
    [encoder encodeObject: __subtitle forKey: @"subtitle"];
  }
  if (__description_isset)
  {
    [encoder encodeObject: __description forKey: @"description"];
  }
  if (__source_uri_isset)
  {
    [encoder encodeObject: __source_uri forKey: @"source_uri"];
  }
  if (__photo_data_isset)
  {
    [encoder encodeObject: __photo_data forKey: @"photo_data"];
  }
}

- (void) dealloc
{
  [__subtitle release_stub];
  [__description release_stub];
  [__source_uri release_stub];
  [__photo_data release_stub];
  [super dealloc_stub];
}

- (NSString *) subtitle {
  return [[__subtitle retain_stub] autorelease_stub];
}

- (void) setSubtitle: (NSString *) subtitle {
  [subtitle retain_stub];
  [__subtitle release_stub];
  __subtitle = subtitle;
  __subtitle_isset = YES;
}

- (BOOL) subtitleIsSet {
  return __subtitle_isset;
}

- (void) unsetSubtitle {
  [__subtitle release_stub];
  __subtitle = nil;
  __subtitle_isset = NO;
}

- (NSString *) description {
  return [[__description retain_stub] autorelease_stub];
}

- (void) setDescription: (NSString *) description {
  [description retain_stub];
  [__description release_stub];
  __description = description;
  __description_isset = YES;
}

- (BOOL) descriptionIsSet {
  return __description_isset;
}

- (void) unsetDescription {
  [__description release_stub];
  __description = nil;
  __description_isset = NO;
}

- (NSString *) source_uri {
  return [[__source_uri retain_stub] autorelease_stub];
}

- (void) setSource_uri: (NSString *) source_uri {
  [source_uri retain_stub];
  [__source_uri release_stub];
  __source_uri = source_uri;
  __source_uri_isset = YES;
}

- (BOOL) source_uriIsSet {
  return __source_uri_isset;
}

- (void) unsetSource_uri {
  [__source_uri release_stub];
  __source_uri = nil;
  __source_uri_isset = NO;
}

- (common.modelPhotoData *) photo_data {
  return [[__photo_data retain_stub] autorelease_stub];
}

- (void) setPhoto_data: (common.modelPhotoData *) photo_data {
  [photo_data retain_stub];
  [__photo_data release_stub];
  __photo_data = photo_data;
  __photo_data_isset = YES;
}

- (BOOL) photo_dataIsSet {
  return __photo_data_isset;
}

- (void) unsetPhoto_data {
  [__photo_data release_stub];
  __photo_data = nil;
  __photo_data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubtitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          common.modelPhotoData *fieldValue = [[common.modelPhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setPhoto_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhotoDescription"];
  if (__subtitle_isset) {
    if (__subtitle != nil) {
      [outProtocol writeFieldBeginWithName: @"subtitle" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __subtitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__description_isset) {
    if (__description != nil) {
      [outProtocol writeFieldBeginWithName: @"description" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __description];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_uri_isset) {
    if (__source_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"source_uri" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __source_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_data_isset) {
    if (__photo_data != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_data" type: TType_STRUCT fieldID: 4];
      [__photo_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__source_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'source_uri' is not set."];
  }
  if (!__photo_data_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'photo_data' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelPhotoDescription("];
  [ms appendString: @"subtitle:"];
  [ms appendFormat: @"\"%@\"", __subtitle];
  [ms appendString: @",description:"];
  [ms appendFormat: @"\"%@\"", __description];
  [ms appendString: @",source_uri:"];
  [ms appendFormat: @"\"%@\"", __source_uri];
  [ms appendString: @",photo_data:"];
  [ms appendFormat: @"%@", __photo_data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelArtifactSource

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (common.modelEntityId) id name: (NSString *) name artifact_title_name: (NSString *) artifact_title_name start_page_uri: (NSString *) start_page_uri subdomains: (NSMutableSet *) subdomains
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __artifact_title_name = [artifact_title_name retain_stub];
  __artifact_title_name_isset = YES;
  __start_page_uri = [start_page_uri retain_stub];
  __start_page_uri_isset = YES;
  __subdomains = [subdomains retain_stub];
  __subdomains_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"artifact_title_name"])
  {
    __artifact_title_name = [[decoder decodeObjectForKey: @"artifact_title_name"] retain_stub];
    __artifact_title_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"start_page_uri"])
  {
    __start_page_uri = [[decoder decodeObjectForKey: @"start_page_uri"] retain_stub];
    __start_page_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"subdomains"])
  {
    __subdomains = [[decoder decodeObjectForKey: @"subdomains"] retain_stub];
    __subdomains_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__artifact_title_name_isset)
  {
    [encoder encodeObject: __artifact_title_name forKey: @"artifact_title_name"];
  }
  if (__start_page_uri_isset)
  {
    [encoder encodeObject: __start_page_uri forKey: @"start_page_uri"];
  }
  if (__subdomains_isset)
  {
    [encoder encodeObject: __subdomains forKey: @"subdomains"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__artifact_title_name release_stub];
  [__start_page_uri release_stub];
  [__subdomains release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) artifact_title_name {
  return [[__artifact_title_name retain_stub] autorelease_stub];
}

- (void) setArtifact_title_name: (NSString *) artifact_title_name {
  [artifact_title_name retain_stub];
  [__artifact_title_name release_stub];
  __artifact_title_name = artifact_title_name;
  __artifact_title_name_isset = YES;
}

- (BOOL) artifact_title_nameIsSet {
  return __artifact_title_name_isset;
}

- (void) unsetArtifact_title_name {
  [__artifact_title_name release_stub];
  __artifact_title_name = nil;
  __artifact_title_name_isset = NO;
}

- (NSString *) start_page_uri {
  return [[__start_page_uri retain_stub] autorelease_stub];
}

- (void) setStart_page_uri: (NSString *) start_page_uri {
  [start_page_uri retain_stub];
  [__start_page_uri release_stub];
  __start_page_uri = start_page_uri;
  __start_page_uri_isset = YES;
}

- (BOOL) start_page_uriIsSet {
  return __start_page_uri_isset;
}

- (void) unsetStart_page_uri {
  [__start_page_uri release_stub];
  __start_page_uri = nil;
  __start_page_uri_isset = NO;
}

- (NSMutableSet *) subdomains {
  return [[__subdomains retain_stub] autorelease_stub];
}

- (void) setSubdomains: (NSMutableSet *) subdomains {
  [subdomains retain_stub];
  [__subdomains release_stub];
  __subdomains = subdomains;
  __subdomains_isset = YES;
}

- (BOOL) subdomainsIsSet {
  return __subdomains_isset;
}

- (void) unsetSubdomains {
  [__subdomains release_stub];
  __subdomains = nil;
  __subdomains_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArtifact_title_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStart_page_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_SET) {
          int _size5;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size5];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readSetEnd];
          [self setSubdomains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ArtifactSource"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__artifact_title_name_isset) {
    if (__artifact_title_name != nil) {
      [outProtocol writeFieldBeginWithName: @"artifact_title_name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __artifact_title_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__start_page_uri_isset) {
    if (__start_page_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"start_page_uri" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __start_page_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__subdomains_isset) {
    if (__subdomains != nil) {
      [outProtocol writeFieldBeginWithName: @"subdomains" type: TType_SET fieldID: 5];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__subdomains count]];
        NSEnumerator * _iter8 = [__subdomains objectEnumerator];
        id obj9;
        while ((obj9 = [_iter8 nextObject]))
        {
          [outProtocol writeString: obj9];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__artifact_title_name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'artifact_title_name' is not set."];
  }
  if (!__start_page_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'start_page_uri' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelArtifactSource("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",artifact_title_name:"];
  [ms appendFormat: @"\"%@\"", __artifact_title_name];
  [ms appendString: @",start_page_uri:"];
  [ms appendFormat: @"\"%@\"", __start_page_uri];
  [ms appendString: @",subdomains:"];
  [ms appendFormat: @"%@", __subdomains];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelScreenConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name width: (int32_t) width
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __width = width;
  __width_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScreenConfig"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelScreenConfig("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelArtifact

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_uri: (NSString *) page_uri title: (NSString *) title artifact_source_pk: (common.modelEntityId) artifact_source_pk photo_descriptions: (NSMutableArray *) photo_descriptions
{
  self = [super init];
  __page_uri = [page_uri retain_stub];
  __page_uri_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __artifact_source_pk = artifact_source_pk;
  __artifact_source_pk_isset = YES;
  __photo_descriptions = [photo_descriptions retain_stub];
  __photo_descriptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_uri"])
  {
    __page_uri = [[decoder decodeObjectForKey: @"page_uri"] retain_stub];
    __page_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"artifact_source_pk"])
  {
    __artifact_source_pk = [decoder decodeInt64ForKey: @"artifact_source_pk"];
    __artifact_source_pk_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_descriptions"])
  {
    __photo_descriptions = [[decoder decodeObjectForKey: @"photo_descriptions"] retain_stub];
    __photo_descriptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_uri_isset)
  {
    [encoder encodeObject: __page_uri forKey: @"page_uri"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__artifact_source_pk_isset)
  {
    [encoder encodeInt64: __artifact_source_pk forKey: @"artifact_source_pk"];
  }
  if (__photo_descriptions_isset)
  {
    [encoder encodeObject: __photo_descriptions forKey: @"photo_descriptions"];
  }
}

- (void) dealloc
{
  [__page_uri release_stub];
  [__title release_stub];
  [__photo_descriptions release_stub];
  [super dealloc_stub];
}

- (NSString *) page_uri {
  return [[__page_uri retain_stub] autorelease_stub];
}

- (void) setPage_uri: (NSString *) page_uri {
  [page_uri retain_stub];
  [__page_uri release_stub];
  __page_uri = page_uri;
  __page_uri_isset = YES;
}

- (BOOL) page_uriIsSet {
  return __page_uri_isset;
}

- (void) unsetPage_uri {
  [__page_uri release_stub];
  __page_uri = nil;
  __page_uri_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (int64_t) artifact_source_pk {
  return __artifact_source_pk;
}

- (void) setArtifact_source_pk: (int64_t) artifact_source_pk {
  __artifact_source_pk = artifact_source_pk;
  __artifact_source_pk_isset = YES;
}

- (BOOL) artifact_source_pkIsSet {
  return __artifact_source_pk_isset;
}

- (void) unsetArtifact_source_pk {
  __artifact_source_pk_isset = NO;
}

- (NSMutableArray *) photo_descriptions {
  return [[__photo_descriptions retain_stub] autorelease_stub];
}

- (void) setPhoto_descriptions: (NSMutableArray *) photo_descriptions {
  [photo_descriptions retain_stub];
  [__photo_descriptions release_stub];
  __photo_descriptions = photo_descriptions;
  __photo_descriptions_isset = YES;
}

- (BOOL) photo_descriptionsIsSet {
  return __photo_descriptions_isset;
}

- (void) unsetPhoto_descriptions {
  [__photo_descriptions release_stub];
  __photo_descriptions = nil;
  __photo_descriptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPage_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArtifact_source_pk: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            common.modelPhotoDescription *_elem12 = [[common.modelPhotoDescription alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_descriptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Artifact"];
  if (__page_uri_isset) {
    if (__page_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"page_uri" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __page_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__artifact_source_pk_isset) {
    [outProtocol writeFieldBeginWithName: @"artifact_source_pk" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __artifact_source_pk];
    [outProtocol writeFieldEnd];
  }
  if (__photo_descriptions_isset) {
    if (__photo_descriptions != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_descriptions" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_descriptions count]];
        int idx14;
        for (idx14 = 0; idx14 < [__photo_descriptions count]; idx14++)
        {
          [[__photo_descriptions objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__page_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'page_uri' is not set."];
  }
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__artifact_source_pk_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'artifact_source_pk' is not set."];
  }
  if (!__photo_descriptions_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'photo_descriptions' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelArtifact("];
  [ms appendString: @"page_uri:"];
  [ms appendFormat: @"\"%@\"", __page_uri];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",artifact_source_pk:"];
  [ms appendFormat: @"%qi", __artifact_source_pk];
  [ms appendString: @",photo_descriptions:"];
  [ms appendFormat: @"%@", __photo_descriptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation common.modelGeneration

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (common.modelEntityId) id datetime_started_ts: (int32_t) datetime_started_ts datetime_ended_ts: (int32_t) datetime_ended_ts artifact_sources: (NSMutableDictionary *) artifact_sources image_screen_config: (common.modelScreenConfig *) image_screen_config video_screen_config: (common.modelScreenConfig *) video_screen_config artifacts: (NSMutableArray *) artifacts
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __datetime_started_ts = datetime_started_ts;
  __datetime_started_ts_isset = YES;
  __datetime_ended_ts = datetime_ended_ts;
  __datetime_ended_ts_isset = YES;
  __artifact_sources = [artifact_sources retain_stub];
  __artifact_sources_isset = YES;
  __image_screen_config = [image_screen_config retain_stub];
  __image_screen_config_isset = YES;
  __video_screen_config = [video_screen_config retain_stub];
  __video_screen_config_isset = YES;
  __artifacts = [artifacts retain_stub];
  __artifacts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"datetime_started_ts"])
  {
    __datetime_started_ts = [decoder decodeInt32ForKey: @"datetime_started_ts"];
    __datetime_started_ts_isset = YES;
  }
  if ([decoder containsValueForKey: @"datetime_ended_ts"])
  {
    __datetime_ended_ts = [decoder decodeInt32ForKey: @"datetime_ended_ts"];
    __datetime_ended_ts_isset = YES;
  }
  if ([decoder containsValueForKey: @"artifact_sources"])
  {
    __artifact_sources = [[decoder decodeObjectForKey: @"artifact_sources"] retain_stub];
    __artifact_sources_isset = YES;
  }
  if ([decoder containsValueForKey: @"image_screen_config"])
  {
    __image_screen_config = [[decoder decodeObjectForKey: @"image_screen_config"] retain_stub];
    __image_screen_config_isset = YES;
  }
  if ([decoder containsValueForKey: @"video_screen_config"])
  {
    __video_screen_config = [[decoder decodeObjectForKey: @"video_screen_config"] retain_stub];
    __video_screen_config_isset = YES;
  }
  if ([decoder containsValueForKey: @"artifacts"])
  {
    __artifacts = [[decoder decodeObjectForKey: @"artifacts"] retain_stub];
    __artifacts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__datetime_started_ts_isset)
  {
    [encoder encodeInt32: __datetime_started_ts forKey: @"datetime_started_ts"];
  }
  if (__datetime_ended_ts_isset)
  {
    [encoder encodeInt32: __datetime_ended_ts forKey: @"datetime_ended_ts"];
  }
  if (__artifact_sources_isset)
  {
    [encoder encodeObject: __artifact_sources forKey: @"artifact_sources"];
  }
  if (__image_screen_config_isset)
  {
    [encoder encodeObject: __image_screen_config forKey: @"image_screen_config"];
  }
  if (__video_screen_config_isset)
  {
    [encoder encodeObject: __video_screen_config forKey: @"video_screen_config"];
  }
  if (__artifacts_isset)
  {
    [encoder encodeObject: __artifacts forKey: @"artifacts"];
  }
}

- (void) dealloc
{
  [__artifact_sources release_stub];
  [__image_screen_config release_stub];
  [__video_screen_config release_stub];
  [__artifacts release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) datetime_started_ts {
  return __datetime_started_ts;
}

- (void) setDatetime_started_ts: (int32_t) datetime_started_ts {
  __datetime_started_ts = datetime_started_ts;
  __datetime_started_ts_isset = YES;
}

- (BOOL) datetime_started_tsIsSet {
  return __datetime_started_ts_isset;
}

- (void) unsetDatetime_started_ts {
  __datetime_started_ts_isset = NO;
}

- (int32_t) datetime_ended_ts {
  return __datetime_ended_ts;
}

- (void) setDatetime_ended_ts: (int32_t) datetime_ended_ts {
  __datetime_ended_ts = datetime_ended_ts;
  __datetime_ended_ts_isset = YES;
}

- (BOOL) datetime_ended_tsIsSet {
  return __datetime_ended_ts_isset;
}

- (void) unsetDatetime_ended_ts {
  __datetime_ended_ts_isset = NO;
}

- (NSMutableDictionary *) artifact_sources {
  return [[__artifact_sources retain_stub] autorelease_stub];
}

- (void) setArtifact_sources: (NSMutableDictionary *) artifact_sources {
  [artifact_sources retain_stub];
  [__artifact_sources release_stub];
  __artifact_sources = artifact_sources;
  __artifact_sources_isset = YES;
}

- (BOOL) artifact_sourcesIsSet {
  return __artifact_sources_isset;
}

- (void) unsetArtifact_sources {
  [__artifact_sources release_stub];
  __artifact_sources = nil;
  __artifact_sources_isset = NO;
}

- (common.modelScreenConfig *) image_screen_config {
  return [[__image_screen_config retain_stub] autorelease_stub];
}

- (void) setImage_screen_config: (common.modelScreenConfig *) image_screen_config {
  [image_screen_config retain_stub];
  [__image_screen_config release_stub];
  __image_screen_config = image_screen_config;
  __image_screen_config_isset = YES;
}

- (BOOL) image_screen_configIsSet {
  return __image_screen_config_isset;
}

- (void) unsetImage_screen_config {
  [__image_screen_config release_stub];
  __image_screen_config = nil;
  __image_screen_config_isset = NO;
}

- (common.modelScreenConfig *) video_screen_config {
  return [[__video_screen_config retain_stub] autorelease_stub];
}

- (void) setVideo_screen_config: (common.modelScreenConfig *) video_screen_config {
  [video_screen_config retain_stub];
  [__video_screen_config release_stub];
  __video_screen_config = video_screen_config;
  __video_screen_config_isset = YES;
}

- (BOOL) video_screen_configIsSet {
  return __video_screen_config_isset;
}

- (void) unsetVideo_screen_config {
  [__video_screen_config release_stub];
  __video_screen_config = nil;
  __video_screen_config_isset = NO;
}

- (NSMutableArray *) artifacts {
  return [[__artifacts retain_stub] autorelease_stub];
}

- (void) setArtifacts: (NSMutableArray *) artifacts {
  [artifacts retain_stub];
  [__artifacts release_stub];
  __artifacts = artifacts;
  __artifacts_isset = YES;
}

- (BOOL) artifactsIsSet {
  return __artifacts_isset;
}

- (void) unsetArtifacts {
  [__artifacts release_stub];
  __artifacts = nil;
  __artifacts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDatetime_started_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDatetime_ended_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size15;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size15];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int64_t _key17 = [inProtocol readI64];
            common.modelArtifactSource *_val18 = [[common.modelArtifactSource alloc] init];
            [_val18 read: inProtocol];
            [fieldValue setObject: _val18 forKey: [NSNumber numberWithLongLong: _key17]];
            [_val18 release_stub];
          }
          [inProtocol readMapEnd];
          [self setArtifact_sources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          common.modelScreenConfig *fieldValue = [[common.modelScreenConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setImage_screen_config: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          common.modelScreenConfig *fieldValue = [[common.modelScreenConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setVideo_screen_config: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size19;
          [inProtocol readListBeginReturningElementType: NULL size: &_size19];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size19];
          int _i20;
          for (_i20 = 0; _i20 < _size19; ++_i20)
          {
            common.modelArtifact *_elem21 = [[common.modelArtifact alloc] init];
            [_elem21 read: inProtocol];
            [fieldValue addObject: _elem21];
            [_elem21 release_stub];
          }
          [inProtocol readListEnd];
          [self setArtifacts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Generation"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__datetime_started_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"datetime_started_ts" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __datetime_started_ts];
    [outProtocol writeFieldEnd];
  }
  if (__datetime_ended_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"datetime_ended_ts" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __datetime_ended_ts];
    [outProtocol writeFieldEnd];
  }
  if (__artifact_sources_isset) {
    if (__artifact_sources != nil) {
      [outProtocol writeFieldBeginWithName: @"artifact_sources" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__artifact_sources count]];
        NSEnumerator * _iter22 = [__artifact_sources keyEnumerator];
        id key23;
        while ((key23 = [_iter22 nextObject]))
        {
          [outProtocol writeI64: [key23 longLongValue]];
          [[__artifact_sources objectForKey: key23] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_screen_config_isset) {
    if (__image_screen_config != nil) {
      [outProtocol writeFieldBeginWithName: @"image_screen_config" type: TType_STRUCT fieldID: 5];
      [__image_screen_config write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__video_screen_config_isset) {
    if (__video_screen_config != nil) {
      [outProtocol writeFieldBeginWithName: @"video_screen_config" type: TType_STRUCT fieldID: 6];
      [__video_screen_config write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__artifacts_isset) {
    if (__artifacts != nil) {
      [outProtocol writeFieldBeginWithName: @"artifacts" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__artifacts count]];
        int idx25;
        for (idx25 = 0; idx25 < [__artifacts count]; idx25++)
        {
          [[__artifacts objectAtIndex: idx25] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__datetime_started_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'datetime_started_ts' is not set."];
  }
  if (!__datetime_ended_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'datetime_ended_ts' is not set."];
  }
  if (!__artifact_sources_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'artifact_sources' is not set."];
  }
  if (!__image_screen_config_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'image_screen_config' is not set."];
  }
  if (!__video_screen_config_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'video_screen_config' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"common.modelGeneration("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",datetime_started_ts:"];
  [ms appendFormat: @"%i", __datetime_started_ts];
  [ms appendString: @",datetime_ended_ts:"];
  [ms appendFormat: @"%i", __datetime_ended_ts];
  [ms appendString: @",artifact_sources:"];
  [ms appendFormat: @"%@", __artifact_sources];
  [ms appendString: @",image_screen_config:"];
  [ms appendFormat: @"%@", __image_screen_config];
  [ms appendString: @",video_screen_config:"];
  [ms appendFormat: @"%@", __video_screen_config];
  [ms appendString: @",artifacts:"];
  [ms appendFormat: @"%@", __artifacts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation common.modelmodelConstants
+ (void) initialize {
}
@end

