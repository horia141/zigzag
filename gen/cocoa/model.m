/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "model.h"

@implementation Generation

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id status: (int) status date_started_ts: (int32_t) date_started_ts date_ended_ts: (int32_t) date_ended_ts
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __status = status;
  __status_isset = YES;
  __date_started_ts = date_started_ts;
  __date_started_ts_isset = YES;
  __date_ended_ts = date_ended_ts;
  __date_ended_ts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"date_started_ts"])
  {
    __date_started_ts = [decoder decodeInt32ForKey: @"date_started_ts"];
    __date_started_ts_isset = YES;
  }
  if ([decoder containsValueForKey: @"date_ended_ts"])
  {
    __date_ended_ts = [decoder decodeInt32ForKey: @"date_ended_ts"];
    __date_ended_ts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__date_started_ts_isset)
  {
    [encoder encodeInt32: __date_started_ts forKey: @"date_started_ts"];
  }
  if (__date_ended_ts_isset)
  {
    [encoder encodeInt32: __date_ended_ts forKey: @"date_ended_ts"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) date_started_ts {
  return __date_started_ts;
}

- (void) setDate_started_ts: (int32_t) date_started_ts {
  __date_started_ts = date_started_ts;
  __date_started_ts_isset = YES;
}

- (BOOL) date_started_tsIsSet {
  return __date_started_ts_isset;
}

- (void) unsetDate_started_ts {
  __date_started_ts_isset = NO;
}

- (int32_t) date_ended_ts {
  return __date_ended_ts;
}

- (void) setDate_ended_ts: (int32_t) date_ended_ts {
  __date_ended_ts = date_ended_ts;
  __date_ended_ts_isset = YES;
}

- (BOOL) date_ended_tsIsSet {
  return __date_ended_ts_isset;
}

- (void) unsetDate_ended_ts {
  __date_ended_ts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDate_started_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDate_ended_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Generation"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__date_started_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"date_started_ts" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __date_started_ts];
    [outProtocol writeFieldEnd];
  }
  if (__date_ended_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"date_ended_ts" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __date_ended_ts];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
  if (!__date_started_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'date_started_ts' is not set."];
  }
  if (!__date_ended_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'date_ended_ts' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Generation("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",date_started_ts:"];
  [ms appendFormat: @"%i", __date_started_ts];
  [ms appendString: @",date_ended_ts:"];
  [ms appendFormat: @"%i", __date_ended_ts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ArtifactSource

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name start_page_uri: (NSString *) start_page_uri subdomains: (NSMutableSet *) subdomains
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __start_page_uri = [start_page_uri retain_stub];
  __start_page_uri_isset = YES;
  __subdomains = [subdomains retain_stub];
  __subdomains_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"start_page_uri"])
  {
    __start_page_uri = [[decoder decodeObjectForKey: @"start_page_uri"] retain_stub];
    __start_page_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"subdomains"])
  {
    __subdomains = [[decoder decodeObjectForKey: @"subdomains"] retain_stub];
    __subdomains_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__start_page_uri_isset)
  {
    [encoder encodeObject: __start_page_uri forKey: @"start_page_uri"];
  }
  if (__subdomains_isset)
  {
    [encoder encodeObject: __subdomains forKey: @"subdomains"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__start_page_uri release_stub];
  [__subdomains release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) start_page_uri {
  return [[__start_page_uri retain_stub] autorelease_stub];
}

- (void) setStart_page_uri: (NSString *) start_page_uri {
  [start_page_uri retain_stub];
  [__start_page_uri release_stub];
  __start_page_uri = start_page_uri;
  __start_page_uri_isset = YES;
}

- (BOOL) start_page_uriIsSet {
  return __start_page_uri_isset;
}

- (void) unsetStart_page_uri {
  [__start_page_uri release_stub];
  __start_page_uri = nil;
  __start_page_uri_isset = NO;
}

- (NSMutableSet *) subdomains {
  return [[__subdomains retain_stub] autorelease_stub];
}

- (void) setSubdomains: (NSMutableSet *) subdomains {
  [subdomains retain_stub];
  [__subdomains release_stub];
  __subdomains = subdomains;
  __subdomains_isset = YES;
}

- (BOOL) subdomainsIsSet {
  return __subdomains_isset;
}

- (void) unsetSubdomains {
  [__subdomains release_stub];
  __subdomains = nil;
  __subdomains_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStart_page_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_SET) {
          int _size0;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size0];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readSetEnd];
          [self setSubdomains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ArtifactSource"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__start_page_uri_isset) {
    if (__start_page_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"start_page_uri" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __start_page_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__subdomains_isset) {
    if (__subdomains != nil) {
      [outProtocol writeFieldBeginWithName: @"subdomains" type: TType_SET fieldID: 4];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__subdomains count]];
        NSEnumerator * _iter3 = [__subdomains objectEnumerator];
        id obj4;
        while ((obj4 = [_iter3 nextObject]))
        {
          [outProtocol writeString: obj4];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__start_page_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'start_page_uri' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ArtifactSource("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",start_page_uri:"];
  [ms appendFormat: @"\"%@\"", __start_page_uri];
  [ms appendString: @",subdomains:"];
  [ms appendFormat: @"%@", __subdomains];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ScreenConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name width: (int32_t) width
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __width = width;
  __width_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScreenConfig"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ScreenConfig("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Artifact

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id page_uri: (NSString *) page_uri title: (NSString *) title photo_descriptions: (NSMutableArray *) photo_descriptions
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __page_uri = [page_uri retain_stub];
  __page_uri_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __photo_descriptions = [photo_descriptions retain_stub];
  __photo_descriptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_uri"])
  {
    __page_uri = [[decoder decodeObjectForKey: @"page_uri"] retain_stub];
    __page_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_descriptions"])
  {
    __photo_descriptions = [[decoder decodeObjectForKey: @"photo_descriptions"] retain_stub];
    __photo_descriptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__page_uri_isset)
  {
    [encoder encodeObject: __page_uri forKey: @"page_uri"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__photo_descriptions_isset)
  {
    [encoder encodeObject: __photo_descriptions forKey: @"photo_descriptions"];
  }
}

- (void) dealloc
{
  [__page_uri release_stub];
  [__title release_stub];
  [__photo_descriptions release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) page_uri {
  return [[__page_uri retain_stub] autorelease_stub];
}

- (void) setPage_uri: (NSString *) page_uri {
  [page_uri retain_stub];
  [__page_uri release_stub];
  __page_uri = page_uri;
  __page_uri_isset = YES;
}

- (BOOL) page_uriIsSet {
  return __page_uri_isset;
}

- (void) unsetPage_uri {
  [__page_uri release_stub];
  __page_uri = nil;
  __page_uri_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSMutableArray *) photo_descriptions {
  return [[__photo_descriptions retain_stub] autorelease_stub];
}

- (void) setPhoto_descriptions: (NSMutableArray *) photo_descriptions {
  [photo_descriptions retain_stub];
  [__photo_descriptions release_stub];
  __photo_descriptions = photo_descriptions;
  __photo_descriptions_isset = YES;
}

- (BOOL) photo_descriptionsIsSet {
  return __photo_descriptions_isset;
}

- (void) unsetPhoto_descriptions {
  [__photo_descriptions release_stub];
  __photo_descriptions = nil;
  __photo_descriptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPage_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            PhotoDescription *_elem7 = [[PhotoDescription alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_descriptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Artifact"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__page_uri_isset) {
    if (__page_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"page_uri" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __page_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_descriptions_isset) {
    if (__photo_descriptions != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_descriptions" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_descriptions count]];
        int idx9;
        for (idx9 = 0; idx9 < [__photo_descriptions count]; idx9++)
        {
          [[__photo_descriptions objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__page_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'page_uri' is not set."];
  }
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__photo_descriptions_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'photo_descriptions' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Artifact("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",page_uri:"];
  [ms appendFormat: @"\"%@\"", __page_uri];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",photo_descriptions:"];
  [ms appendFormat: @"%@", __photo_descriptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PhotoDescription

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubtitle: (NSString *) subtitle description: (NSString *) description source_uri: (NSString *) source_uri original_uri_path: (NSString *) original_uri_path image_data: (ImagePhotoData) image_data video_data: (VideoPhotoData) video_data
{
  self = [super init];
  __subtitle = [subtitle retain_stub];
  __subtitle_isset = YES;
  __description = [description retain_stub];
  __description_isset = YES;
  __source_uri = [source_uri retain_stub];
  __source_uri_isset = YES;
  __original_uri_path = [original_uri_path retain_stub];
  __original_uri_path_isset = YES;
  __image_data = [image_data retain_stub];
  __image_data_isset = YES;
  __video_data = [video_data retain_stub];
  __video_data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"subtitle"])
  {
    __subtitle = [[decoder decodeObjectForKey: @"subtitle"] retain_stub];
    __subtitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"description"])
  {
    __description = [[decoder decodeObjectForKey: @"description"] retain_stub];
    __description_isset = YES;
  }
  if ([decoder containsValueForKey: @"source_uri"])
  {
    __source_uri = [[decoder decodeObjectForKey: @"source_uri"] retain_stub];
    __source_uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"original_uri_path"])
  {
    __original_uri_path = [[decoder decodeObjectForKey: @"original_uri_path"] retain_stub];
    __original_uri_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"image_data"])
  {
    __image_data = [[decoder decodeObjectForKey: @"image_data"] retain_stub];
    __image_data_isset = YES;
  }
  if ([decoder containsValueForKey: @"video_data"])
  {
    __video_data = [[decoder decodeObjectForKey: @"video_data"] retain_stub];
    __video_data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__subtitle_isset)
  {
    [encoder encodeObject: __subtitle forKey: @"subtitle"];
  }
  if (__description_isset)
  {
    [encoder encodeObject: __description forKey: @"description"];
  }
  if (__source_uri_isset)
  {
    [encoder encodeObject: __source_uri forKey: @"source_uri"];
  }
  if (__original_uri_path_isset)
  {
    [encoder encodeObject: __original_uri_path forKey: @"original_uri_path"];
  }
  if (__image_data_isset)
  {
    [encoder encodeObject: __image_data forKey: @"image_data"];
  }
  if (__video_data_isset)
  {
    [encoder encodeObject: __video_data forKey: @"video_data"];
  }
}

- (void) dealloc
{
  [__subtitle release_stub];
  [__description release_stub];
  [__source_uri release_stub];
  [__original_uri_path release_stub];
  [__image_data release_stub];
  [__video_data release_stub];
  [super dealloc_stub];
}

- (NSString *) subtitle {
  return [[__subtitle retain_stub] autorelease_stub];
}

- (void) setSubtitle: (NSString *) subtitle {
  [subtitle retain_stub];
  [__subtitle release_stub];
  __subtitle = subtitle;
  __subtitle_isset = YES;
}

- (BOOL) subtitleIsSet {
  return __subtitle_isset;
}

- (void) unsetSubtitle {
  [__subtitle release_stub];
  __subtitle = nil;
  __subtitle_isset = NO;
}

- (NSString *) description {
  return [[__description retain_stub] autorelease_stub];
}

- (void) setDescription: (NSString *) description {
  [description retain_stub];
  [__description release_stub];
  __description = description;
  __description_isset = YES;
}

- (BOOL) descriptionIsSet {
  return __description_isset;
}

- (void) unsetDescription {
  [__description release_stub];
  __description = nil;
  __description_isset = NO;
}

- (NSString *) source_uri {
  return [[__source_uri retain_stub] autorelease_stub];
}

- (void) setSource_uri: (NSString *) source_uri {
  [source_uri retain_stub];
  [__source_uri release_stub];
  __source_uri = source_uri;
  __source_uri_isset = YES;
}

- (BOOL) source_uriIsSet {
  return __source_uri_isset;
}

- (void) unsetSource_uri {
  [__source_uri release_stub];
  __source_uri = nil;
  __source_uri_isset = NO;
}

- (NSString *) original_uri_path {
  return [[__original_uri_path retain_stub] autorelease_stub];
}

- (void) setOriginal_uri_path: (NSString *) original_uri_path {
  [original_uri_path retain_stub];
  [__original_uri_path release_stub];
  __original_uri_path = original_uri_path;
  __original_uri_path_isset = YES;
}

- (BOOL) original_uri_pathIsSet {
  return __original_uri_path_isset;
}

- (void) unsetOriginal_uri_path {
  [__original_uri_path release_stub];
  __original_uri_path = nil;
  __original_uri_path_isset = NO;
}

- (ImagePhotoData *) image_data {
  return [[__image_data retain_stub] autorelease_stub];
}

- (void) setImage_data: (ImagePhotoData *) image_data {
  [image_data retain_stub];
  [__image_data release_stub];
  __image_data = image_data;
  __image_data_isset = YES;
}

- (BOOL) image_dataIsSet {
  return __image_data_isset;
}

- (void) unsetImage_data {
  [__image_data release_stub];
  __image_data = nil;
  __image_data_isset = NO;
}

- (VideoPhotoData *) video_data {
  return [[__video_data retain_stub] autorelease_stub];
}

- (void) setVideo_data: (VideoPhotoData *) video_data {
  [video_data retain_stub];
  [__video_data release_stub];
  __video_data = video_data;
  __video_data_isset = YES;
}

- (BOOL) video_dataIsSet {
  return __video_data_isset;
}

- (void) unsetVideo_data {
  [__video_data release_stub];
  __video_data = nil;
  __video_data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubtitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource_uri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOriginal_uri_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          ImagePhotoData *fieldValue = [[ImagePhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setImage_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          VideoPhotoData *fieldValue = [[VideoPhotoData alloc] init];
          [fieldValue read: inProtocol];
          [self setVideo_data: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhotoDescription"];
  if (__subtitle_isset) {
    if (__subtitle != nil) {
      [outProtocol writeFieldBeginWithName: @"subtitle" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __subtitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__description_isset) {
    if (__description != nil) {
      [outProtocol writeFieldBeginWithName: @"description" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __description];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_uri_isset) {
    if (__source_uri != nil) {
      [outProtocol writeFieldBeginWithName: @"source_uri" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __source_uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__original_uri_path_isset) {
    if (__original_uri_path != nil) {
      [outProtocol writeFieldBeginWithName: @"original_uri_path" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __original_uri_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_data_isset) {
    if (__image_data != nil) {
      [outProtocol writeFieldBeginWithName: @"image_data" type: TType_STRUCT fieldID: 5];
      [__image_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__video_data_isset) {
    if (__video_data != nil) {
      [outProtocol writeFieldBeginWithName: @"video_data" type: TType_STRUCT fieldID: 6];
      [__video_data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__source_uri_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'source_uri' is not set."];
  }
  if (!__original_uri_path_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'original_uri_path' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PhotoDescription("];
  [ms appendString: @"subtitle:"];
  [ms appendFormat: @"\"%@\"", __subtitle];
  [ms appendString: @",description:"];
  [ms appendFormat: @"\"%@\"", __description];
  [ms appendString: @",source_uri:"];
  [ms appendFormat: @"\"%@\"", __source_uri];
  [ms appendString: @",original_uri_path:"];
  [ms appendFormat: @"\"%@\"", __original_uri_path];
  [ms appendString: @",image_data:"];
  [ms appendFormat: @"%@", __image_data];
  [ms appendString: @",video_data:"];
  [ms appendFormat: @"%@", __video_data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ImagePhotoData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFull_image_desc: (TileData) full_image_desc tiles_desc: (NSMutableArray *) tiles_desc screen_config_fk: (int64_t) screen_config_fk
{
  self = [super init];
  __full_image_desc = [full_image_desc retain_stub];
  __full_image_desc_isset = YES;
  __tiles_desc = [tiles_desc retain_stub];
  __tiles_desc_isset = YES;
  __screen_config_fk = screen_config_fk;
  __screen_config_fk_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"full_image_desc"])
  {
    __full_image_desc = [[decoder decodeObjectForKey: @"full_image_desc"] retain_stub];
    __full_image_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"tiles_desc"])
  {
    __tiles_desc = [[decoder decodeObjectForKey: @"tiles_desc"] retain_stub];
    __tiles_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"screen_config_fk"])
  {
    __screen_config_fk = [decoder decodeInt64ForKey: @"screen_config_fk"];
    __screen_config_fk_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__full_image_desc_isset)
  {
    [encoder encodeObject: __full_image_desc forKey: @"full_image_desc"];
  }
  if (__tiles_desc_isset)
  {
    [encoder encodeObject: __tiles_desc forKey: @"tiles_desc"];
  }
  if (__screen_config_fk_isset)
  {
    [encoder encodeInt64: __screen_config_fk forKey: @"screen_config_fk"];
  }
}

- (void) dealloc
{
  [__full_image_desc release_stub];
  [__tiles_desc release_stub];
  [super dealloc_stub];
}

- (TileData *) full_image_desc {
  return [[__full_image_desc retain_stub] autorelease_stub];
}

- (void) setFull_image_desc: (TileData *) full_image_desc {
  [full_image_desc retain_stub];
  [__full_image_desc release_stub];
  __full_image_desc = full_image_desc;
  __full_image_desc_isset = YES;
}

- (BOOL) full_image_descIsSet {
  return __full_image_desc_isset;
}

- (void) unsetFull_image_desc {
  [__full_image_desc release_stub];
  __full_image_desc = nil;
  __full_image_desc_isset = NO;
}

- (NSMutableArray *) tiles_desc {
  return [[__tiles_desc retain_stub] autorelease_stub];
}

- (void) setTiles_desc: (NSMutableArray *) tiles_desc {
  [tiles_desc retain_stub];
  [__tiles_desc release_stub];
  __tiles_desc = tiles_desc;
  __tiles_desc_isset = YES;
}

- (BOOL) tiles_descIsSet {
  return __tiles_desc_isset;
}

- (void) unsetTiles_desc {
  [__tiles_desc release_stub];
  __tiles_desc = nil;
  __tiles_desc_isset = NO;
}

- (int64_t) screen_config_fk {
  return __screen_config_fk;
}

- (void) setScreen_config_fk: (int64_t) screen_config_fk {
  __screen_config_fk = screen_config_fk;
  __screen_config_fk_isset = YES;
}

- (BOOL) screen_config_fkIsSet {
  return __screen_config_fk_isset;
}

- (void) unsetScreen_config_fk {
  __screen_config_fk_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TileData *fieldValue = [[TileData alloc] init];
          [fieldValue read: inProtocol];
          [self setFull_image_desc: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            TileData *_elem12 = [[TileData alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setTiles_desc: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setScreen_config_fk: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ImagePhotoData"];
  if (__full_image_desc_isset) {
    if (__full_image_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"full_image_desc" type: TType_STRUCT fieldID: 1];
      [__full_image_desc write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tiles_desc_isset) {
    if (__tiles_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"tiles_desc" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__tiles_desc count]];
        int idx14;
        for (idx14 = 0; idx14 < [__tiles_desc count]; idx14++)
        {
          [[__tiles_desc objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__screen_config_fk_isset) {
    [outProtocol writeFieldBeginWithName: @"screen_config_fk" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __screen_config_fk];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__full_image_desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'full_image_desc' is not set."];
  }
  if (!__tiles_desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'tiles_desc' is not set."];
  }
  if (!__screen_config_fk_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'screen_config_fk' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ImagePhotoData("];
  [ms appendString: @"full_image_desc:"];
  [ms appendFormat: @"%@", __full_image_desc];
  [ms appendString: @",tiles_desc:"];
  [ms appendFormat: @"%@", __tiles_desc];
  [ms appendString: @",screen_config_fk:"];
  [ms appendFormat: @"%qi", __screen_config_fk];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VideoPhotoData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFirst_frame_desc: (TileData) first_frame_desc video_desc: (TileData) video_desc time_between_frames_ms: (int32_t) time_between_frames_ms framerate: (int32_t) framerate
{
  self = [super init];
  __first_frame_desc = [first_frame_desc retain_stub];
  __first_frame_desc_isset = YES;
  __video_desc = [video_desc retain_stub];
  __video_desc_isset = YES;
  __time_between_frames_ms = time_between_frames_ms;
  __time_between_frames_ms_isset = YES;
  __framerate = framerate;
  __framerate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"first_frame_desc"])
  {
    __first_frame_desc = [[decoder decodeObjectForKey: @"first_frame_desc"] retain_stub];
    __first_frame_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"video_desc"])
  {
    __video_desc = [[decoder decodeObjectForKey: @"video_desc"] retain_stub];
    __video_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_between_frames_ms"])
  {
    __time_between_frames_ms = [decoder decodeInt32ForKey: @"time_between_frames_ms"];
    __time_between_frames_ms_isset = YES;
  }
  if ([decoder containsValueForKey: @"framerate"])
  {
    __framerate = [decoder decodeInt32ForKey: @"framerate"];
    __framerate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__first_frame_desc_isset)
  {
    [encoder encodeObject: __first_frame_desc forKey: @"first_frame_desc"];
  }
  if (__video_desc_isset)
  {
    [encoder encodeObject: __video_desc forKey: @"video_desc"];
  }
  if (__time_between_frames_ms_isset)
  {
    [encoder encodeInt32: __time_between_frames_ms forKey: @"time_between_frames_ms"];
  }
  if (__framerate_isset)
  {
    [encoder encodeInt32: __framerate forKey: @"framerate"];
  }
}

- (void) dealloc
{
  [__first_frame_desc release_stub];
  [__video_desc release_stub];
  [super dealloc_stub];
}

- (TileData *) first_frame_desc {
  return [[__first_frame_desc retain_stub] autorelease_stub];
}

- (void) setFirst_frame_desc: (TileData *) first_frame_desc {
  [first_frame_desc retain_stub];
  [__first_frame_desc release_stub];
  __first_frame_desc = first_frame_desc;
  __first_frame_desc_isset = YES;
}

- (BOOL) first_frame_descIsSet {
  return __first_frame_desc_isset;
}

- (void) unsetFirst_frame_desc {
  [__first_frame_desc release_stub];
  __first_frame_desc = nil;
  __first_frame_desc_isset = NO;
}

- (TileData *) video_desc {
  return [[__video_desc retain_stub] autorelease_stub];
}

- (void) setVideo_desc: (TileData *) video_desc {
  [video_desc retain_stub];
  [__video_desc release_stub];
  __video_desc = video_desc;
  __video_desc_isset = YES;
}

- (BOOL) video_descIsSet {
  return __video_desc_isset;
}

- (void) unsetVideo_desc {
  [__video_desc release_stub];
  __video_desc = nil;
  __video_desc_isset = NO;
}

- (int32_t) time_between_frames_ms {
  return __time_between_frames_ms;
}

- (void) setTime_between_frames_ms: (int32_t) time_between_frames_ms {
  __time_between_frames_ms = time_between_frames_ms;
  __time_between_frames_ms_isset = YES;
}

- (BOOL) time_between_frames_msIsSet {
  return __time_between_frames_ms_isset;
}

- (void) unsetTime_between_frames_ms {
  __time_between_frames_ms_isset = NO;
}

- (int32_t) framerate {
  return __framerate;
}

- (void) setFramerate: (int32_t) framerate {
  __framerate = framerate;
  __framerate_isset = YES;
}

- (BOOL) framerateIsSet {
  return __framerate_isset;
}

- (void) unsetFramerate {
  __framerate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TileData *fieldValue = [[TileData alloc] init];
          [fieldValue read: inProtocol];
          [self setFirst_frame_desc: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TileData *fieldValue = [[TileData alloc] init];
          [fieldValue read: inProtocol];
          [self setVideo_desc: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_between_frames_ms: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFramerate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VideoPhotoData"];
  if (__first_frame_desc_isset) {
    if (__first_frame_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"first_frame_desc" type: TType_STRUCT fieldID: 1];
      [__first_frame_desc write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__video_desc_isset) {
    if (__video_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"video_desc" type: TType_STRUCT fieldID: 2];
      [__video_desc write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_between_frames_ms_isset) {
    [outProtocol writeFieldBeginWithName: @"time_between_frames_ms" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __time_between_frames_ms];
    [outProtocol writeFieldEnd];
  }
  if (__framerate_isset) {
    [outProtocol writeFieldBeginWithName: @"framerate" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __framerate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__first_frame_desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'first_frame_desc' is not set."];
  }
  if (!__video_desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'video_desc' is not set."];
  }
  if (!__time_between_frames_ms_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'time_between_frames_ms' is not set."];
  }
  if (!__framerate_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'framerate' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VideoPhotoData("];
  [ms appendString: @"first_frame_desc:"];
  [ms appendFormat: @"%@", __first_frame_desc];
  [ms appendString: @",video_desc:"];
  [ms appendFormat: @"%@", __video_desc];
  [ms appendString: @",time_between_frames_ms:"];
  [ms appendFormat: @"%i", __time_between_frames_ms];
  [ms appendString: @",framerate:"];
  [ms appendFormat: @"%i", __framerate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TileData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWidth: (int32_t) width height: (int32_t) height uri_path: (NSString *) uri_path
{
  self = [super init];
  __width = width;
  __width_isset = YES;
  __height = height;
  __height_isset = YES;
  __uri_path = [uri_path retain_stub];
  __uri_path_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"uri_path"])
  {
    __uri_path = [[decoder decodeObjectForKey: @"uri_path"] retain_stub];
    __uri_path_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
  if (__uri_path_isset)
  {
    [encoder encodeObject: __uri_path forKey: @"uri_path"];
  }
}

- (void) dealloc
{
  [__uri_path release_stub];
  [super dealloc_stub];
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (NSString *) uri_path {
  return [[__uri_path retain_stub] autorelease_stub];
}

- (void) setUri_path: (NSString *) uri_path {
  [uri_path retain_stub];
  [__uri_path release_stub];
  __uri_path = uri_path;
  __uri_path_isset = YES;
}

- (BOOL) uri_pathIsSet {
  return __uri_path_isset;
}

- (void) unsetUri_path {
  [__uri_path release_stub];
  __uri_path = nil;
  __uri_path_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUri_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TileData"];
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  if (__uri_path_isset) {
    if (__uri_path != nil) {
      [outProtocol writeFieldBeginWithName: @"uri_path" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __uri_path];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
  if (!__height_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'height' is not set."];
  }
  if (!__uri_path_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uri_path' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TileData("];
  [ms appendString: @"width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @",uri_path:"];
  [ms appendFormat: @"\"%@\"", __uri_path];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation modelConstants
+ (void) initialize {
}
@end

