/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "log_analyzer.h"

@implementation log_analyzer.protosSystemConsumption

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTotal_bytes: (int64_t) total_bytes api_serving_bytes: (int64_t) api_serving_bytes res_serving_bytes: (int64_t) res_serving_bytes
{
  self = [super init];
  __total_bytes = total_bytes;
  __total_bytes_isset = YES;
  __api_serving_bytes = api_serving_bytes;
  __api_serving_bytes_isset = YES;
  __res_serving_bytes = res_serving_bytes;
  __res_serving_bytes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"total_bytes"])
  {
    __total_bytes = [decoder decodeInt64ForKey: @"total_bytes"];
    __total_bytes_isset = YES;
  }
  if ([decoder containsValueForKey: @"api_serving_bytes"])
  {
    __api_serving_bytes = [decoder decodeInt64ForKey: @"api_serving_bytes"];
    __api_serving_bytes_isset = YES;
  }
  if ([decoder containsValueForKey: @"res_serving_bytes"])
  {
    __res_serving_bytes = [decoder decodeInt64ForKey: @"res_serving_bytes"];
    __res_serving_bytes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__total_bytes_isset)
  {
    [encoder encodeInt64: __total_bytes forKey: @"total_bytes"];
  }
  if (__api_serving_bytes_isset)
  {
    [encoder encodeInt64: __api_serving_bytes forKey: @"api_serving_bytes"];
  }
  if (__res_serving_bytes_isset)
  {
    [encoder encodeInt64: __res_serving_bytes forKey: @"res_serving_bytes"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) total_bytes {
  return __total_bytes;
}

- (void) setTotal_bytes: (int64_t) total_bytes {
  __total_bytes = total_bytes;
  __total_bytes_isset = YES;
}

- (BOOL) total_bytesIsSet {
  return __total_bytes_isset;
}

- (void) unsetTotal_bytes {
  __total_bytes_isset = NO;
}

- (int64_t) api_serving_bytes {
  return __api_serving_bytes;
}

- (void) setApi_serving_bytes: (int64_t) api_serving_bytes {
  __api_serving_bytes = api_serving_bytes;
  __api_serving_bytes_isset = YES;
}

- (BOOL) api_serving_bytesIsSet {
  return __api_serving_bytes_isset;
}

- (void) unsetApi_serving_bytes {
  __api_serving_bytes_isset = NO;
}

- (int64_t) res_serving_bytes {
  return __res_serving_bytes;
}

- (void) setRes_serving_bytes: (int64_t) res_serving_bytes {
  __res_serving_bytes = res_serving_bytes;
  __res_serving_bytes_isset = YES;
}

- (BOOL) res_serving_bytesIsSet {
  return __res_serving_bytes_isset;
}

- (void) unsetRes_serving_bytes {
  __res_serving_bytes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTotal_bytes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setApi_serving_bytes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRes_serving_bytes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SystemConsumption"];
  if (__total_bytes_isset) {
    [outProtocol writeFieldBeginWithName: @"total_bytes" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __total_bytes];
    [outProtocol writeFieldEnd];
  }
  if (__api_serving_bytes_isset) {
    [outProtocol writeFieldBeginWithName: @"api_serving_bytes" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __api_serving_bytes];
    [outProtocol writeFieldEnd];
  }
  if (__res_serving_bytes_isset) {
    [outProtocol writeFieldBeginWithName: @"res_serving_bytes" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __res_serving_bytes];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__total_bytes_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'total_bytes' is not set."];
  }
  if (!__api_serving_bytes_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'api_serving_bytes' is not set."];
  }
  if (!__res_serving_bytes_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'res_serving_bytes' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"log_analyzer.protosSystemConsumption("];
  [ms appendString: @"total_bytes:"];
  [ms appendFormat: @"%qi", __total_bytes];
  [ms appendString: @",api_serving_bytes:"];
  [ms appendFormat: @"%qi", __api_serving_bytes];
  [ms appendString: @",res_serving_bytes:"];
  [ms appendFormat: @"%qi", __res_serving_bytes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation log_analyzer.protosAnalysisResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id datetime_ran_ts: (int64_t) datetime_ran_ts month: (log_analyzer.protosSystemConsumption *) month day: (log_analyzer.protosSystemConsumption *) day
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __datetime_ran_ts = datetime_ran_ts;
  __datetime_ran_ts_isset = YES;
  __month = [month retain_stub];
  __month_isset = YES;
  __day = [day retain_stub];
  __day_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"datetime_ran_ts"])
  {
    __datetime_ran_ts = [decoder decodeInt64ForKey: @"datetime_ran_ts"];
    __datetime_ran_ts_isset = YES;
  }
  if ([decoder containsValueForKey: @"month"])
  {
    __month = [[decoder decodeObjectForKey: @"month"] retain_stub];
    __month_isset = YES;
  }
  if ([decoder containsValueForKey: @"day"])
  {
    __day = [[decoder decodeObjectForKey: @"day"] retain_stub];
    __day_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__datetime_ran_ts_isset)
  {
    [encoder encodeInt64: __datetime_ran_ts forKey: @"datetime_ran_ts"];
  }
  if (__month_isset)
  {
    [encoder encodeObject: __month forKey: @"month"];
  }
  if (__day_isset)
  {
    [encoder encodeObject: __day forKey: @"day"];
  }
}

- (void) dealloc
{
  [__month release_stub];
  [__day release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) datetime_ran_ts {
  return __datetime_ran_ts;
}

- (void) setDatetime_ran_ts: (int64_t) datetime_ran_ts {
  __datetime_ran_ts = datetime_ran_ts;
  __datetime_ran_ts_isset = YES;
}

- (BOOL) datetime_ran_tsIsSet {
  return __datetime_ran_ts_isset;
}

- (void) unsetDatetime_ran_ts {
  __datetime_ran_ts_isset = NO;
}

- (log_analyzer.protosSystemConsumption *) month {
  return [[__month retain_stub] autorelease_stub];
}

- (void) setMonth: (log_analyzer.protosSystemConsumption *) month {
  [month retain_stub];
  [__month release_stub];
  __month = month;
  __month_isset = YES;
}

- (BOOL) monthIsSet {
  return __month_isset;
}

- (void) unsetMonth {
  [__month release_stub];
  __month = nil;
  __month_isset = NO;
}

- (log_analyzer.protosSystemConsumption *) day {
  return [[__day retain_stub] autorelease_stub];
}

- (void) setDay: (log_analyzer.protosSystemConsumption *) day {
  [day retain_stub];
  [__day release_stub];
  __day = day;
  __day_isset = YES;
}

- (BOOL) dayIsSet {
  return __day_isset;
}

- (void) unsetDay {
  [__day release_stub];
  __day = nil;
  __day_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDatetime_ran_ts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          log_analyzer.protosSystemConsumption *fieldValue = [[log_analyzer.protosSystemConsumption alloc] init];
          [fieldValue read: inProtocol];
          [self setMonth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          log_analyzer.protosSystemConsumption *fieldValue = [[log_analyzer.protosSystemConsumption alloc] init];
          [fieldValue read: inProtocol];
          [self setDay: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AnalysisResult"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__datetime_ran_ts_isset) {
    [outProtocol writeFieldBeginWithName: @"datetime_ran_ts" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __datetime_ran_ts];
    [outProtocol writeFieldEnd];
  }
  if (__month_isset) {
    if (__month != nil) {
      [outProtocol writeFieldBeginWithName: @"month" type: TType_STRUCT fieldID: 3];
      [__month write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__day_isset) {
    if (__day != nil) {
      [outProtocol writeFieldBeginWithName: @"day" type: TType_STRUCT fieldID: 4];
      [__day write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__datetime_ran_ts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'datetime_ran_ts' is not set."];
  }
  if (!__month_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'month' is not set."];
  }
  if (!__day_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'day' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"log_analyzer.protosAnalysisResult("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",datetime_ran_ts:"];
  [ms appendFormat: @"%qi", __datetime_ran_ts];
  [ms appendString: @",month:"];
  [ms appendFormat: @"%@", __month];
  [ms appendString: @",day:"];
  [ms appendFormat: @"%@", __day];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation log_analyzer.protoslog_analyzerConstants
+ (void) initialize {
}
@end

