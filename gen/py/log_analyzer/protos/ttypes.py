#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SystemConsumption(object):
  """
  Attributes:
   - total_bytes
   - api_serving_bytes
   - res_serving_bytes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_bytes', None, None, ), # 1
    (2, TType.I64, 'api_serving_bytes', None, None, ), # 2
    (3, TType.I64, 'res_serving_bytes', None, None, ), # 3
  )

  def __init__(self, total_bytes=None, api_serving_bytes=None, res_serving_bytes=None,):
    self.total_bytes = total_bytes
    self.api_serving_bytes = api_serving_bytes
    self.res_serving_bytes = res_serving_bytes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.api_serving_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.res_serving_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SystemConsumption')
    if self.total_bytes is not None:
      oprot.writeFieldBegin('total_bytes', TType.I64, 1)
      oprot.writeI64(self.total_bytes)
      oprot.writeFieldEnd()
    if self.api_serving_bytes is not None:
      oprot.writeFieldBegin('api_serving_bytes', TType.I64, 2)
      oprot.writeI64(self.api_serving_bytes)
      oprot.writeFieldEnd()
    if self.res_serving_bytes is not None:
      oprot.writeFieldBegin('res_serving_bytes', TType.I64, 3)
      oprot.writeI64(self.res_serving_bytes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.total_bytes is None:
      raise TProtocol.TProtocolException(message='Required field total_bytes is unset!')
    if self.api_serving_bytes is None:
      raise TProtocol.TProtocolException(message='Required field api_serving_bytes is unset!')
    if self.res_serving_bytes is None:
      raise TProtocol.TProtocolException(message='Required field res_serving_bytes is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_bytes)
    value = (value * 31) ^ hash(self.api_serving_bytes)
    value = (value * 31) ^ hash(self.res_serving_bytes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AnalysisResult(object):
  """
  Attributes:
   - id
   - datetime_ran_ts
   - month
   - day
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'datetime_ran_ts', None, None, ), # 2
    (3, TType.STRUCT, 'month', (SystemConsumption, SystemConsumption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'day', (SystemConsumption, SystemConsumption.thrift_spec), None, ), # 4
  )

  def __init__(self, id=None, datetime_ran_ts=None, month=None, day=None,):
    self.id = id
    self.datetime_ran_ts = datetime_ran_ts
    self.month = month
    self.day = day

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.datetime_ran_ts = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.month = SystemConsumption()
          self.month.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.day = SystemConsumption()
          self.day.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AnalysisResult')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.datetime_ran_ts is not None:
      oprot.writeFieldBegin('datetime_ran_ts', TType.I64, 2)
      oprot.writeI64(self.datetime_ran_ts)
      oprot.writeFieldEnd()
    if self.month is not None:
      oprot.writeFieldBegin('month', TType.STRUCT, 3)
      self.month.write(oprot)
      oprot.writeFieldEnd()
    if self.day is not None:
      oprot.writeFieldBegin('day', TType.STRUCT, 4)
      self.day.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.datetime_ran_ts is None:
      raise TProtocol.TProtocolException(message='Required field datetime_ran_ts is unset!')
    if self.month is None:
      raise TProtocol.TProtocolException(message='Required field month is unset!')
    if self.day is None:
      raise TProtocol.TProtocolException(message='Required field day is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.datetime_ran_ts)
    value = (value * 31) ^ hash(self.month)
    value = (value * 31) ^ hash(self.day)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
