#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TileData:
  """
  Attributes:
   - width
   - height
   - uri_path
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'width', None, None, ), # 1
    (2, TType.I32, 'height', None, None, ), # 2
    (3, TType.STRING, 'uri_path', None, None, ), # 3
  )

  def __init__(self, width=None, height=None, uri_path=None,):
    self.width = width
    self.height = height
    self.uri_path = uri_path

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.uri_path = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TileData')
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 1)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 2)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.uri_path is not None:
      oprot.writeFieldBegin('uri_path', TType.STRING, 3)
      oprot.writeString(self.uri_path)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.width is None:
      raise TProtocol.TProtocolException(message='Required field width is unset!')
    if self.height is None:
      raise TProtocol.TProtocolException(message='Required field height is unset!')
    if self.uri_path is None:
      raise TProtocol.TProtocolException(message='Required field uri_path is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.width)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.uri_path)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ImagePhotoData:
  """
  Attributes:
   - full_image
   - tiles
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'full_image', (TileData, TileData.thrift_spec), None, ), # 1
    (2, TType.LIST, 'tiles', (TType.STRUCT,(TileData, TileData.thrift_spec)), None, ), # 2
  )

  def __init__(self, full_image=None, tiles=None,):
    self.full_image = full_image
    self.tiles = tiles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.full_image = TileData()
          self.full_image.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tiles = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TileData()
            _elem5.read(iprot)
            self.tiles.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ImagePhotoData')
    if self.full_image is not None:
      oprot.writeFieldBegin('full_image', TType.STRUCT, 1)
      self.full_image.write(oprot)
      oprot.writeFieldEnd()
    if self.tiles is not None:
      oprot.writeFieldBegin('tiles', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tiles))
      for iter6 in self.tiles:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.full_image is None:
      raise TProtocol.TProtocolException(message='Required field full_image is unset!')
    if self.tiles is None:
      raise TProtocol.TProtocolException(message='Required field tiles is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.full_image)
    value = (value * 31) ^ hash(self.tiles)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VideoPhotoData:
  """
  Attributes:
   - first_frame
   - video
   - frame_count
   - frames_per_sec
   - time_between_frames_ms
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'first_frame', (TileData, TileData.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'video', (TileData, TileData.thrift_spec), None, ), # 2
    (3, TType.I32, 'frame_count', None, None, ), # 3
    (4, TType.I32, 'frames_per_sec', None, None, ), # 4
    (5, TType.I32, 'time_between_frames_ms', None, None, ), # 5
  )

  def __init__(self, first_frame=None, video=None, frame_count=None, frames_per_sec=None, time_between_frames_ms=None,):
    self.first_frame = first_frame
    self.video = video
    self.frame_count = frame_count
    self.frames_per_sec = frames_per_sec
    self.time_between_frames_ms = time_between_frames_ms

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.first_frame = TileData()
          self.first_frame.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.video = TileData()
          self.video.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.frame_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.frames_per_sec = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.time_between_frames_ms = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VideoPhotoData')
    if self.first_frame is not None:
      oprot.writeFieldBegin('first_frame', TType.STRUCT, 1)
      self.first_frame.write(oprot)
      oprot.writeFieldEnd()
    if self.video is not None:
      oprot.writeFieldBegin('video', TType.STRUCT, 2)
      self.video.write(oprot)
      oprot.writeFieldEnd()
    if self.frame_count is not None:
      oprot.writeFieldBegin('frame_count', TType.I32, 3)
      oprot.writeI32(self.frame_count)
      oprot.writeFieldEnd()
    if self.frames_per_sec is not None:
      oprot.writeFieldBegin('frames_per_sec', TType.I32, 4)
      oprot.writeI32(self.frames_per_sec)
      oprot.writeFieldEnd()
    if self.time_between_frames_ms is not None:
      oprot.writeFieldBegin('time_between_frames_ms', TType.I32, 5)
      oprot.writeI32(self.time_between_frames_ms)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.first_frame is None:
      raise TProtocol.TProtocolException(message='Required field first_frame is unset!')
    if self.video is None:
      raise TProtocol.TProtocolException(message='Required field video is unset!')
    if self.frame_count is None:
      raise TProtocol.TProtocolException(message='Required field frame_count is unset!')
    if self.frames_per_sec is None:
      raise TProtocol.TProtocolException(message='Required field frames_per_sec is unset!')
    if self.time_between_frames_ms is None:
      raise TProtocol.TProtocolException(message='Required field time_between_frames_ms is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.first_frame)
    value = (value * 31) ^ hash(self.video)
    value = (value * 31) ^ hash(self.frame_count)
    value = (value * 31) ^ hash(self.frames_per_sec)
    value = (value * 31) ^ hash(self.time_between_frames_ms)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PhotoDescription:
  """
  Attributes:
   - subtitle
   - description
   - source_uri
   - original_uri_path
   - image_data
   - video_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'subtitle', None, None, ), # 1
    (2, TType.STRING, 'description', None, None, ), # 2
    (3, TType.STRING, 'source_uri', None, None, ), # 3
    (4, TType.STRING, 'original_uri_path', None, None, ), # 4
    (5, TType.MAP, 'image_data', (TType.I64,None,TType.STRUCT,(ImagePhotoData, ImagePhotoData.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'video_data', (TType.I64,None,TType.STRUCT,(VideoPhotoData, VideoPhotoData.thrift_spec)), None, ), # 6
  )

  def __init__(self, subtitle=None, description=None, source_uri=None, original_uri_path=None, image_data=None, video_data=None,):
    self.subtitle = subtitle
    self.description = description
    self.source_uri = source_uri
    self.original_uri_path = original_uri_path
    self.image_data = image_data
    self.video_data = video_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.subtitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source_uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.original_uri_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.image_data = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI64();
            _val13 = ImagePhotoData()
            _val13.read(iprot)
            self.image_data[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.video_data = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readI64();
            _val20 = VideoPhotoData()
            _val20.read(iprot)
            self.video_data[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PhotoDescription')
    if self.subtitle is not None:
      oprot.writeFieldBegin('subtitle', TType.STRING, 1)
      oprot.writeString(self.subtitle)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 2)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.source_uri is not None:
      oprot.writeFieldBegin('source_uri', TType.STRING, 3)
      oprot.writeString(self.source_uri)
      oprot.writeFieldEnd()
    if self.original_uri_path is not None:
      oprot.writeFieldBegin('original_uri_path', TType.STRING, 4)
      oprot.writeString(self.original_uri_path)
      oprot.writeFieldEnd()
    if self.image_data is not None:
      oprot.writeFieldBegin('image_data', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.image_data))
      for kiter21,viter22 in self.image_data.items():
        oprot.writeI64(kiter21)
        viter22.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.video_data is not None:
      oprot.writeFieldBegin('video_data', TType.MAP, 6)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.video_data))
      for kiter23,viter24 in self.video_data.items():
        oprot.writeI64(kiter23)
        viter24.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.source_uri is None:
      raise TProtocol.TProtocolException(message='Required field source_uri is unset!')
    if self.original_uri_path is None:
      raise TProtocol.TProtocolException(message='Required field original_uri_path is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.subtitle)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.source_uri)
    value = (value * 31) ^ hash(self.original_uri_path)
    value = (value * 31) ^ hash(self.image_data)
    value = (value * 31) ^ hash(self.video_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArtifactSource:
  """
  Attributes:
   - id
   - name
   - start_page_uri
   - subdomains
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'start_page_uri', None, None, ), # 3
    (4, TType.SET, 'subdomains', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, id=None, name=None, start_page_uri=None, subdomains=None,):
    self.id = id
    self.name = name
    self.start_page_uri = start_page_uri
    self.subdomains = subdomains

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start_page_uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.subdomains = set()
          (_etype28, _size25) = iprot.readSetBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readString();
            self.subdomains.add(_elem30)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArtifactSource')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.start_page_uri is not None:
      oprot.writeFieldBegin('start_page_uri', TType.STRING, 3)
      oprot.writeString(self.start_page_uri)
      oprot.writeFieldEnd()
    if self.subdomains is not None:
      oprot.writeFieldBegin('subdomains', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.subdomains))
      for iter31 in self.subdomains:
        oprot.writeString(iter31)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.start_page_uri is None:
      raise TProtocol.TProtocolException(message='Required field start_page_uri is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.start_page_uri)
    value = (value * 31) ^ hash(self.subdomains)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScreenConfig:
  """
  Attributes:
   - id
   - name
   - width
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'width', None, None, ), # 3
  )

  def __init__(self, id=None, name=None, width=None,):
    self.id = id
    self.name = name
    self.width = width

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScreenConfig')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 3)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.width is None:
      raise TProtocol.TProtocolException(message='Required field width is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.width)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Artifact:
  """
  Attributes:
   - page_uri
   - title
   - photo_descriptions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'page_uri', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.LIST, 'photo_descriptions', (TType.STRUCT,(PhotoDescription, PhotoDescription.thrift_spec)), None, ), # 3
  )

  def __init__(self, page_uri=None, title=None, photo_descriptions=None,):
    self.page_uri = page_uri
    self.title = title
    self.photo_descriptions = photo_descriptions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.page_uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.photo_descriptions = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = PhotoDescription()
            _elem37.read(iprot)
            self.photo_descriptions.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Artifact')
    if self.page_uri is not None:
      oprot.writeFieldBegin('page_uri', TType.STRING, 1)
      oprot.writeString(self.page_uri)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.photo_descriptions is not None:
      oprot.writeFieldBegin('photo_descriptions', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.photo_descriptions))
      for iter38 in self.photo_descriptions:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.page_uri is None:
      raise TProtocol.TProtocolException(message='Required field page_uri is unset!')
    if self.title is None:
      raise TProtocol.TProtocolException(message='Required field title is unset!')
    if self.photo_descriptions is None:
      raise TProtocol.TProtocolException(message='Required field photo_descriptions is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page_uri)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.photo_descriptions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Generation:
  """
  Attributes:
   - id
   - date_started_ts
   - date_ended_ts
   - artifact_sources
   - screen_configs
   - artifacts
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'date_started_ts', None, None, ), # 2
    (3, TType.I32, 'date_ended_ts', None, None, ), # 3
    (4, TType.MAP, 'artifact_sources', (TType.I64,None,TType.STRUCT,(ArtifactSource, ArtifactSource.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'screen_configs', (TType.I64,None,TType.STRUCT,(ScreenConfig, ScreenConfig.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'artifacts', (TType.STRUCT,(Artifact, Artifact.thrift_spec)), None, ), # 6
  )

  def __init__(self, id=None, date_started_ts=None, date_ended_ts=None, artifact_sources=None, screen_configs=None, artifacts=None,):
    self.id = id
    self.date_started_ts = date_started_ts
    self.date_ended_ts = date_ended_ts
    self.artifact_sources = artifact_sources
    self.screen_configs = screen_configs
    self.artifacts = artifacts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.date_started_ts = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.date_ended_ts = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.artifact_sources = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI64();
            _val45 = ArtifactSource()
            _val45.read(iprot)
            self.artifact_sources[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.screen_configs = {}
          (_ktype47, _vtype48, _size46 ) = iprot.readMapBegin()
          for _i50 in xrange(_size46):
            _key51 = iprot.readI64();
            _val52 = ScreenConfig()
            _val52.read(iprot)
            self.screen_configs[_key51] = _val52
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.artifacts = []
          (_etype56, _size53) = iprot.readListBegin()
          for _i57 in xrange(_size53):
            _elem58 = Artifact()
            _elem58.read(iprot)
            self.artifacts.append(_elem58)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Generation')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.date_started_ts is not None:
      oprot.writeFieldBegin('date_started_ts', TType.I32, 2)
      oprot.writeI32(self.date_started_ts)
      oprot.writeFieldEnd()
    if self.date_ended_ts is not None:
      oprot.writeFieldBegin('date_ended_ts', TType.I32, 3)
      oprot.writeI32(self.date_ended_ts)
      oprot.writeFieldEnd()
    if self.artifact_sources is not None:
      oprot.writeFieldBegin('artifact_sources', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.artifact_sources))
      for kiter59,viter60 in self.artifact_sources.items():
        oprot.writeI64(kiter59)
        viter60.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.screen_configs is not None:
      oprot.writeFieldBegin('screen_configs', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.screen_configs))
      for kiter61,viter62 in self.screen_configs.items():
        oprot.writeI64(kiter61)
        viter62.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.artifacts is not None:
      oprot.writeFieldBegin('artifacts', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.artifacts))
      for iter63 in self.artifacts:
        iter63.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.date_started_ts is None:
      raise TProtocol.TProtocolException(message='Required field date_started_ts is unset!')
    if self.date_ended_ts is None:
      raise TProtocol.TProtocolException(message='Required field date_ended_ts is unset!')
    if self.artifact_sources is None:
      raise TProtocol.TProtocolException(message='Required field artifact_sources is unset!')
    if self.screen_configs is None:
      raise TProtocol.TProtocolException(message='Required field screen_configs is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.date_started_ts)
    value = (value * 31) ^ hash(self.date_ended_ts)
    value = (value * 31) ^ hash(self.artifact_sources)
    value = (value * 31) ^ hash(self.screen_configs)
    value = (value * 31) ^ hash(self.artifacts)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
