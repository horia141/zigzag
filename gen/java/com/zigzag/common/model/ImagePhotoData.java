/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zigzag.common.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-10")
public class ImagePhotoData implements org.apache.thrift.TBase<ImagePhotoData, ImagePhotoData._Fields>, java.io.Serializable, Cloneable, Comparable<ImagePhotoData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImagePhotoData");

  private static final org.apache.thrift.protocol.TField FULL_IMAGE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("full_image_desc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TILES_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles_desc", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SCREEN_CONFIG_FK_FIELD_DESC = new org.apache.thrift.protocol.TField("screen_config_fk", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImagePhotoDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImagePhotoDataTupleSchemeFactory());
  }

  public TileData full_image_desc; // required
  public List<TileData> tiles_desc; // required
  public long screen_config_fk; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_IMAGE_DESC((short)1, "full_image_desc"),
    TILES_DESC((short)2, "tiles_desc"),
    SCREEN_CONFIG_FK((short)3, "screen_config_fk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_IMAGE_DESC
          return FULL_IMAGE_DESC;
        case 2: // TILES_DESC
          return TILES_DESC;
        case 3: // SCREEN_CONFIG_FK
          return SCREEN_CONFIG_FK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCREEN_CONFIG_FK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_IMAGE_DESC, new org.apache.thrift.meta_data.FieldMetaData("full_image_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TileData.class)));
    tmpMap.put(_Fields.TILES_DESC, new org.apache.thrift.meta_data.FieldMetaData("tiles_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TileData.class))));
    tmpMap.put(_Fields.SCREEN_CONFIG_FK, new org.apache.thrift.meta_data.FieldMetaData("screen_config_fk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImagePhotoData.class, metaDataMap);
  }

  public ImagePhotoData() {
  }

  public ImagePhotoData(
    TileData full_image_desc,
    List<TileData> tiles_desc,
    long screen_config_fk)
  {
    this();
    this.full_image_desc = full_image_desc;
    this.tiles_desc = tiles_desc;
    this.screen_config_fk = screen_config_fk;
    setScreen_config_fkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImagePhotoData(ImagePhotoData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFull_image_desc()) {
      this.full_image_desc = new TileData(other.full_image_desc);
    }
    if (other.isSetTiles_desc()) {
      List<TileData> __this__tiles_desc = new ArrayList<TileData>(other.tiles_desc.size());
      for (TileData other_element : other.tiles_desc) {
        __this__tiles_desc.add(new TileData(other_element));
      }
      this.tiles_desc = __this__tiles_desc;
    }
    this.screen_config_fk = other.screen_config_fk;
  }

  public ImagePhotoData deepCopy() {
    return new ImagePhotoData(this);
  }

  @Override
  public void clear() {
    this.full_image_desc = null;
    this.tiles_desc = null;
    setScreen_config_fkIsSet(false);
    this.screen_config_fk = 0;
  }

  public TileData getFull_image_desc() {
    return this.full_image_desc;
  }

  public ImagePhotoData setFull_image_desc(TileData full_image_desc) {
    this.full_image_desc = full_image_desc;
    return this;
  }

  public void unsetFull_image_desc() {
    this.full_image_desc = null;
  }

  /** Returns true if field full_image_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetFull_image_desc() {
    return this.full_image_desc != null;
  }

  public void setFull_image_descIsSet(boolean value) {
    if (!value) {
      this.full_image_desc = null;
    }
  }

  public int getTiles_descSize() {
    return (this.tiles_desc == null) ? 0 : this.tiles_desc.size();
  }

  public java.util.Iterator<TileData> getTiles_descIterator() {
    return (this.tiles_desc == null) ? null : this.tiles_desc.iterator();
  }

  public void addToTiles_desc(TileData elem) {
    if (this.tiles_desc == null) {
      this.tiles_desc = new ArrayList<TileData>();
    }
    this.tiles_desc.add(elem);
  }

  public List<TileData> getTiles_desc() {
    return this.tiles_desc;
  }

  public ImagePhotoData setTiles_desc(List<TileData> tiles_desc) {
    this.tiles_desc = tiles_desc;
    return this;
  }

  public void unsetTiles_desc() {
    this.tiles_desc = null;
  }

  /** Returns true if field tiles_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetTiles_desc() {
    return this.tiles_desc != null;
  }

  public void setTiles_descIsSet(boolean value) {
    if (!value) {
      this.tiles_desc = null;
    }
  }

  public long getScreen_config_fk() {
    return this.screen_config_fk;
  }

  public ImagePhotoData setScreen_config_fk(long screen_config_fk) {
    this.screen_config_fk = screen_config_fk;
    setScreen_config_fkIsSet(true);
    return this;
  }

  public void unsetScreen_config_fk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCREEN_CONFIG_FK_ISSET_ID);
  }

  /** Returns true if field screen_config_fk is set (has been assigned a value) and false otherwise */
  public boolean isSetScreen_config_fk() {
    return EncodingUtils.testBit(__isset_bitfield, __SCREEN_CONFIG_FK_ISSET_ID);
  }

  public void setScreen_config_fkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCREEN_CONFIG_FK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FULL_IMAGE_DESC:
      if (value == null) {
        unsetFull_image_desc();
      } else {
        setFull_image_desc((TileData)value);
      }
      break;

    case TILES_DESC:
      if (value == null) {
        unsetTiles_desc();
      } else {
        setTiles_desc((List<TileData>)value);
      }
      break;

    case SCREEN_CONFIG_FK:
      if (value == null) {
        unsetScreen_config_fk();
      } else {
        setScreen_config_fk((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_IMAGE_DESC:
      return getFull_image_desc();

    case TILES_DESC:
      return getTiles_desc();

    case SCREEN_CONFIG_FK:
      return Long.valueOf(getScreen_config_fk());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULL_IMAGE_DESC:
      return isSetFull_image_desc();
    case TILES_DESC:
      return isSetTiles_desc();
    case SCREEN_CONFIG_FK:
      return isSetScreen_config_fk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImagePhotoData)
      return this.equals((ImagePhotoData)that);
    return false;
  }

  public boolean equals(ImagePhotoData that) {
    if (that == null)
      return false;

    boolean this_present_full_image_desc = true && this.isSetFull_image_desc();
    boolean that_present_full_image_desc = true && that.isSetFull_image_desc();
    if (this_present_full_image_desc || that_present_full_image_desc) {
      if (!(this_present_full_image_desc && that_present_full_image_desc))
        return false;
      if (!this.full_image_desc.equals(that.full_image_desc))
        return false;
    }

    boolean this_present_tiles_desc = true && this.isSetTiles_desc();
    boolean that_present_tiles_desc = true && that.isSetTiles_desc();
    if (this_present_tiles_desc || that_present_tiles_desc) {
      if (!(this_present_tiles_desc && that_present_tiles_desc))
        return false;
      if (!this.tiles_desc.equals(that.tiles_desc))
        return false;
    }

    boolean this_present_screen_config_fk = true;
    boolean that_present_screen_config_fk = true;
    if (this_present_screen_config_fk || that_present_screen_config_fk) {
      if (!(this_present_screen_config_fk && that_present_screen_config_fk))
        return false;
      if (this.screen_config_fk != that.screen_config_fk)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_full_image_desc = true && (isSetFull_image_desc());
    list.add(present_full_image_desc);
    if (present_full_image_desc)
      list.add(full_image_desc);

    boolean present_tiles_desc = true && (isSetTiles_desc());
    list.add(present_tiles_desc);
    if (present_tiles_desc)
      list.add(tiles_desc);

    boolean present_screen_config_fk = true;
    list.add(present_screen_config_fk);
    if (present_screen_config_fk)
      list.add(screen_config_fk);

    return list.hashCode();
  }

  @Override
  public int compareTo(ImagePhotoData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFull_image_desc()).compareTo(other.isSetFull_image_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFull_image_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.full_image_desc, other.full_image_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiles_desc()).compareTo(other.isSetTiles_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiles_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles_desc, other.tiles_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreen_config_fk()).compareTo(other.isSetScreen_config_fk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreen_config_fk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screen_config_fk, other.screen_config_fk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImagePhotoData(");
    boolean first = true;

    sb.append("full_image_desc:");
    if (this.full_image_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.full_image_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiles_desc:");
    if (this.tiles_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.tiles_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("screen_config_fk:");
    sb.append(this.screen_config_fk);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (full_image_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'full_image_desc' was not present! Struct: " + toString());
    }
    if (tiles_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tiles_desc' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'screen_config_fk' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (full_image_desc != null) {
      full_image_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImagePhotoDataStandardSchemeFactory implements SchemeFactory {
    public ImagePhotoDataStandardScheme getScheme() {
      return new ImagePhotoDataStandardScheme();
    }
  }

  private static class ImagePhotoDataStandardScheme extends StandardScheme<ImagePhotoData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImagePhotoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_IMAGE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.full_image_desc = new TileData();
              struct.full_image_desc.read(iprot);
              struct.setFull_image_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TILES_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.tiles_desc = new ArrayList<TileData>(_list8.size);
                TileData _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TileData();
                  _elem9.read(iprot);
                  struct.tiles_desc.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTiles_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCREEN_CONFIG_FK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.screen_config_fk = iprot.readI64();
              struct.setScreen_config_fkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetScreen_config_fk()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'screen_config_fk' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImagePhotoData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.full_image_desc != null) {
        oprot.writeFieldBegin(FULL_IMAGE_DESC_FIELD_DESC);
        struct.full_image_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tiles_desc != null) {
        oprot.writeFieldBegin(TILES_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tiles_desc.size()));
          for (TileData _iter11 : struct.tiles_desc)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCREEN_CONFIG_FK_FIELD_DESC);
      oprot.writeI64(struct.screen_config_fk);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImagePhotoDataTupleSchemeFactory implements SchemeFactory {
    public ImagePhotoDataTupleScheme getScheme() {
      return new ImagePhotoDataTupleScheme();
    }
  }

  private static class ImagePhotoDataTupleScheme extends TupleScheme<ImagePhotoData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImagePhotoData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.full_image_desc.write(oprot);
      {
        oprot.writeI32(struct.tiles_desc.size());
        for (TileData _iter12 : struct.tiles_desc)
        {
          _iter12.write(oprot);
        }
      }
      oprot.writeI64(struct.screen_config_fk);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImagePhotoData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.full_image_desc = new TileData();
      struct.full_image_desc.read(iprot);
      struct.setFull_image_descIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tiles_desc = new ArrayList<TileData>(_list13.size);
        TileData _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new TileData();
          _elem14.read(iprot);
          struct.tiles_desc.add(_elem14);
        }
      }
      struct.setTiles_descIsSet(true);
      struct.screen_config_fk = iprot.readI64();
      struct.setScreen_config_fkIsSet(true);
    }
  }

}

