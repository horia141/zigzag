/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zigzag.common.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-11")
public class PhotoDescription implements org.apache.thrift.TBase<PhotoDescription, PhotoDescription._Fields>, java.io.Serializable, Cloneable, Comparable<PhotoDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhotoDescription");

  private static final org.apache.thrift.protocol.TField SUBTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("subtitle", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("source_uri", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGINAL_URI_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("original_uri_path", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("image_data", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField VIDEO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("video_data", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PhotoDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PhotoDescriptionTupleSchemeFactory());
  }

  public String subtitle; // optional
  public String description; // optional
  public String source_uri; // required
  public String original_uri_path; // required
  public Map<Long,ImagePhotoData> image_data; // optional
  public Map<Long,VideoPhotoData> video_data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBTITLE((short)1, "subtitle"),
    DESCRIPTION((short)2, "description"),
    SOURCE_URI((short)3, "source_uri"),
    ORIGINAL_URI_PATH((short)4, "original_uri_path"),
    IMAGE_DATA((short)5, "image_data"),
    VIDEO_DATA((short)6, "video_data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBTITLE
          return SUBTITLE;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // SOURCE_URI
          return SOURCE_URI;
        case 4: // ORIGINAL_URI_PATH
          return ORIGINAL_URI_PATH;
        case 5: // IMAGE_DATA
          return IMAGE_DATA;
        case 6: // VIDEO_DATA
          return VIDEO_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUBTITLE,_Fields.DESCRIPTION,_Fields.IMAGE_DATA,_Fields.VIDEO_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBTITLE, new org.apache.thrift.meta_data.FieldMetaData("subtitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_URI, new org.apache.thrift.meta_data.FieldMetaData("source_uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_URI_PATH, new org.apache.thrift.meta_data.FieldMetaData("original_uri_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_DATA, new org.apache.thrift.meta_data.FieldMetaData("image_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "EntityId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePhotoData.class))));
    tmpMap.put(_Fields.VIDEO_DATA, new org.apache.thrift.meta_data.FieldMetaData("video_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "EntityId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VideoPhotoData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhotoDescription.class, metaDataMap);
  }

  public PhotoDescription() {
  }

  public PhotoDescription(
    String source_uri,
    String original_uri_path)
  {
    this();
    this.source_uri = source_uri;
    this.original_uri_path = original_uri_path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhotoDescription(PhotoDescription other) {
    if (other.isSetSubtitle()) {
      this.subtitle = other.subtitle;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetSource_uri()) {
      this.source_uri = other.source_uri;
    }
    if (other.isSetOriginal_uri_path()) {
      this.original_uri_path = other.original_uri_path;
    }
    if (other.isSetImage_data()) {
      Map<Long,ImagePhotoData> __this__image_data = new HashMap<Long,ImagePhotoData>(other.image_data.size());
      for (Map.Entry<Long, ImagePhotoData> other_element : other.image_data.entrySet()) {

        Long other_element_key = other_element.getKey();
        ImagePhotoData other_element_value = other_element.getValue();

        Long __this__image_data_copy_key = other_element_key;

        ImagePhotoData __this__image_data_copy_value = new ImagePhotoData(other_element_value);

        __this__image_data.put(__this__image_data_copy_key, __this__image_data_copy_value);
      }
      this.image_data = __this__image_data;
    }
    if (other.isSetVideo_data()) {
      Map<Long,VideoPhotoData> __this__video_data = new HashMap<Long,VideoPhotoData>(other.video_data.size());
      for (Map.Entry<Long, VideoPhotoData> other_element : other.video_data.entrySet()) {

        Long other_element_key = other_element.getKey();
        VideoPhotoData other_element_value = other_element.getValue();

        Long __this__video_data_copy_key = other_element_key;

        VideoPhotoData __this__video_data_copy_value = new VideoPhotoData(other_element_value);

        __this__video_data.put(__this__video_data_copy_key, __this__video_data_copy_value);
      }
      this.video_data = __this__video_data;
    }
  }

  public PhotoDescription deepCopy() {
    return new PhotoDescription(this);
  }

  @Override
  public void clear() {
    this.subtitle = null;
    this.description = null;
    this.source_uri = null;
    this.original_uri_path = null;
    this.image_data = null;
    this.video_data = null;
  }

  public String getSubtitle() {
    return this.subtitle;
  }

  public PhotoDescription setSubtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  public void unsetSubtitle() {
    this.subtitle = null;
  }

  /** Returns true if field subtitle is set (has been assigned a value) and false otherwise */
  public boolean isSetSubtitle() {
    return this.subtitle != null;
  }

  public void setSubtitleIsSet(boolean value) {
    if (!value) {
      this.subtitle = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public PhotoDescription setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getSource_uri() {
    return this.source_uri;
  }

  public PhotoDescription setSource_uri(String source_uri) {
    this.source_uri = source_uri;
    return this;
  }

  public void unsetSource_uri() {
    this.source_uri = null;
  }

  /** Returns true if field source_uri is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_uri() {
    return this.source_uri != null;
  }

  public void setSource_uriIsSet(boolean value) {
    if (!value) {
      this.source_uri = null;
    }
  }

  public String getOriginal_uri_path() {
    return this.original_uri_path;
  }

  public PhotoDescription setOriginal_uri_path(String original_uri_path) {
    this.original_uri_path = original_uri_path;
    return this;
  }

  public void unsetOriginal_uri_path() {
    this.original_uri_path = null;
  }

  /** Returns true if field original_uri_path is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_uri_path() {
    return this.original_uri_path != null;
  }

  public void setOriginal_uri_pathIsSet(boolean value) {
    if (!value) {
      this.original_uri_path = null;
    }
  }

  public int getImage_dataSize() {
    return (this.image_data == null) ? 0 : this.image_data.size();
  }

  public void putToImage_data(long key, ImagePhotoData val) {
    if (this.image_data == null) {
      this.image_data = new HashMap<Long,ImagePhotoData>();
    }
    this.image_data.put(key, val);
  }

  public Map<Long,ImagePhotoData> getImage_data() {
    return this.image_data;
  }

  public PhotoDescription setImage_data(Map<Long,ImagePhotoData> image_data) {
    this.image_data = image_data;
    return this;
  }

  public void unsetImage_data() {
    this.image_data = null;
  }

  /** Returns true if field image_data is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_data() {
    return this.image_data != null;
  }

  public void setImage_dataIsSet(boolean value) {
    if (!value) {
      this.image_data = null;
    }
  }

  public int getVideo_dataSize() {
    return (this.video_data == null) ? 0 : this.video_data.size();
  }

  public void putToVideo_data(long key, VideoPhotoData val) {
    if (this.video_data == null) {
      this.video_data = new HashMap<Long,VideoPhotoData>();
    }
    this.video_data.put(key, val);
  }

  public Map<Long,VideoPhotoData> getVideo_data() {
    return this.video_data;
  }

  public PhotoDescription setVideo_data(Map<Long,VideoPhotoData> video_data) {
    this.video_data = video_data;
    return this;
  }

  public void unsetVideo_data() {
    this.video_data = null;
  }

  /** Returns true if field video_data is set (has been assigned a value) and false otherwise */
  public boolean isSetVideo_data() {
    return this.video_data != null;
  }

  public void setVideo_dataIsSet(boolean value) {
    if (!value) {
      this.video_data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBTITLE:
      if (value == null) {
        unsetSubtitle();
      } else {
        setSubtitle((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case SOURCE_URI:
      if (value == null) {
        unsetSource_uri();
      } else {
        setSource_uri((String)value);
      }
      break;

    case ORIGINAL_URI_PATH:
      if (value == null) {
        unsetOriginal_uri_path();
      } else {
        setOriginal_uri_path((String)value);
      }
      break;

    case IMAGE_DATA:
      if (value == null) {
        unsetImage_data();
      } else {
        setImage_data((Map<Long,ImagePhotoData>)value);
      }
      break;

    case VIDEO_DATA:
      if (value == null) {
        unsetVideo_data();
      } else {
        setVideo_data((Map<Long,VideoPhotoData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBTITLE:
      return getSubtitle();

    case DESCRIPTION:
      return getDescription();

    case SOURCE_URI:
      return getSource_uri();

    case ORIGINAL_URI_PATH:
      return getOriginal_uri_path();

    case IMAGE_DATA:
      return getImage_data();

    case VIDEO_DATA:
      return getVideo_data();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBTITLE:
      return isSetSubtitle();
    case DESCRIPTION:
      return isSetDescription();
    case SOURCE_URI:
      return isSetSource_uri();
    case ORIGINAL_URI_PATH:
      return isSetOriginal_uri_path();
    case IMAGE_DATA:
      return isSetImage_data();
    case VIDEO_DATA:
      return isSetVideo_data();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhotoDescription)
      return this.equals((PhotoDescription)that);
    return false;
  }

  public boolean equals(PhotoDescription that) {
    if (that == null)
      return false;

    boolean this_present_subtitle = true && this.isSetSubtitle();
    boolean that_present_subtitle = true && that.isSetSubtitle();
    if (this_present_subtitle || that_present_subtitle) {
      if (!(this_present_subtitle && that_present_subtitle))
        return false;
      if (!this.subtitle.equals(that.subtitle))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_source_uri = true && this.isSetSource_uri();
    boolean that_present_source_uri = true && that.isSetSource_uri();
    if (this_present_source_uri || that_present_source_uri) {
      if (!(this_present_source_uri && that_present_source_uri))
        return false;
      if (!this.source_uri.equals(that.source_uri))
        return false;
    }

    boolean this_present_original_uri_path = true && this.isSetOriginal_uri_path();
    boolean that_present_original_uri_path = true && that.isSetOriginal_uri_path();
    if (this_present_original_uri_path || that_present_original_uri_path) {
      if (!(this_present_original_uri_path && that_present_original_uri_path))
        return false;
      if (!this.original_uri_path.equals(that.original_uri_path))
        return false;
    }

    boolean this_present_image_data = true && this.isSetImage_data();
    boolean that_present_image_data = true && that.isSetImage_data();
    if (this_present_image_data || that_present_image_data) {
      if (!(this_present_image_data && that_present_image_data))
        return false;
      if (!this.image_data.equals(that.image_data))
        return false;
    }

    boolean this_present_video_data = true && this.isSetVideo_data();
    boolean that_present_video_data = true && that.isSetVideo_data();
    if (this_present_video_data || that_present_video_data) {
      if (!(this_present_video_data && that_present_video_data))
        return false;
      if (!this.video_data.equals(that.video_data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subtitle = true && (isSetSubtitle());
    list.add(present_subtitle);
    if (present_subtitle)
      list.add(subtitle);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_source_uri = true && (isSetSource_uri());
    list.add(present_source_uri);
    if (present_source_uri)
      list.add(source_uri);

    boolean present_original_uri_path = true && (isSetOriginal_uri_path());
    list.add(present_original_uri_path);
    if (present_original_uri_path)
      list.add(original_uri_path);

    boolean present_image_data = true && (isSetImage_data());
    list.add(present_image_data);
    if (present_image_data)
      list.add(image_data);

    boolean present_video_data = true && (isSetVideo_data());
    list.add(present_video_data);
    if (present_video_data)
      list.add(video_data);

    return list.hashCode();
  }

  @Override
  public int compareTo(PhotoDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubtitle()).compareTo(other.isSetSubtitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubtitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtitle, other.subtitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_uri()).compareTo(other.isSetSource_uri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_uri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_uri, other.source_uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_uri_path()).compareTo(other.isSetOriginal_uri_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_uri_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_uri_path, other.original_uri_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage_data()).compareTo(other.isSetImage_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_data, other.image_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideo_data()).compareTo(other.isSetVideo_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideo_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.video_data, other.video_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PhotoDescription(");
    boolean first = true;

    if (isSetSubtitle()) {
      sb.append("subtitle:");
      if (this.subtitle == null) {
        sb.append("null");
      } else {
        sb.append(this.subtitle);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("source_uri:");
    if (this.source_uri == null) {
      sb.append("null");
    } else {
      sb.append(this.source_uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original_uri_path:");
    if (this.original_uri_path == null) {
      sb.append("null");
    } else {
      sb.append(this.original_uri_path);
    }
    first = false;
    if (isSetImage_data()) {
      if (!first) sb.append(", ");
      sb.append("image_data:");
      if (this.image_data == null) {
        sb.append("null");
      } else {
        sb.append(this.image_data);
      }
      first = false;
    }
    if (isSetVideo_data()) {
      if (!first) sb.append(", ");
      sb.append("video_data:");
      if (this.video_data == null) {
        sb.append("null");
      } else {
        sb.append(this.video_data);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (source_uri == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'source_uri' was not present! Struct: " + toString());
    }
    if (original_uri_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'original_uri_path' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PhotoDescriptionStandardSchemeFactory implements SchemeFactory {
    public PhotoDescriptionStandardScheme getScheme() {
      return new PhotoDescriptionStandardScheme();
    }
  }

  private static class PhotoDescriptionStandardScheme extends StandardScheme<PhotoDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PhotoDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBTITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subtitle = iprot.readString();
              struct.setSubtitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source_uri = iprot.readString();
              struct.setSource_uriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORIGINAL_URI_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_uri_path = iprot.readString();
              struct.setOriginal_uri_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.image_data = new HashMap<Long,ImagePhotoData>(2*_map8.size);
                long _key9;
                ImagePhotoData _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI64();
                  _val10 = new ImagePhotoData();
                  _val10.read(iprot);
                  struct.image_data.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setImage_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIDEO_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.video_data = new HashMap<Long,VideoPhotoData>(2*_map12.size);
                long _key13;
                VideoPhotoData _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI64();
                  _val14 = new VideoPhotoData();
                  _val14.read(iprot);
                  struct.video_data.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setVideo_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PhotoDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subtitle != null) {
        if (struct.isSetSubtitle()) {
          oprot.writeFieldBegin(SUBTITLE_FIELD_DESC);
          oprot.writeString(struct.subtitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source_uri != null) {
        oprot.writeFieldBegin(SOURCE_URI_FIELD_DESC);
        oprot.writeString(struct.source_uri);
        oprot.writeFieldEnd();
      }
      if (struct.original_uri_path != null) {
        oprot.writeFieldBegin(ORIGINAL_URI_PATH_FIELD_DESC);
        oprot.writeString(struct.original_uri_path);
        oprot.writeFieldEnd();
      }
      if (struct.image_data != null) {
        if (struct.isSetImage_data()) {
          oprot.writeFieldBegin(IMAGE_DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.image_data.size()));
            for (Map.Entry<Long, ImagePhotoData> _iter16 : struct.image_data.entrySet())
            {
              oprot.writeI64(_iter16.getKey());
              _iter16.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.video_data != null) {
        if (struct.isSetVideo_data()) {
          oprot.writeFieldBegin(VIDEO_DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.video_data.size()));
            for (Map.Entry<Long, VideoPhotoData> _iter17 : struct.video_data.entrySet())
            {
              oprot.writeI64(_iter17.getKey());
              _iter17.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PhotoDescriptionTupleSchemeFactory implements SchemeFactory {
    public PhotoDescriptionTupleScheme getScheme() {
      return new PhotoDescriptionTupleScheme();
    }
  }

  private static class PhotoDescriptionTupleScheme extends TupleScheme<PhotoDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PhotoDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.source_uri);
      oprot.writeString(struct.original_uri_path);
      BitSet optionals = new BitSet();
      if (struct.isSetSubtitle()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetImage_data()) {
        optionals.set(2);
      }
      if (struct.isSetVideo_data()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubtitle()) {
        oprot.writeString(struct.subtitle);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImage_data()) {
        {
          oprot.writeI32(struct.image_data.size());
          for (Map.Entry<Long, ImagePhotoData> _iter18 : struct.image_data.entrySet())
          {
            oprot.writeI64(_iter18.getKey());
            _iter18.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetVideo_data()) {
        {
          oprot.writeI32(struct.video_data.size());
          for (Map.Entry<Long, VideoPhotoData> _iter19 : struct.video_data.entrySet())
          {
            oprot.writeI64(_iter19.getKey());
            _iter19.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PhotoDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.source_uri = iprot.readString();
      struct.setSource_uriIsSet(true);
      struct.original_uri_path = iprot.readString();
      struct.setOriginal_uri_pathIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subtitle = iprot.readString();
        struct.setSubtitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map20 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.image_data = new HashMap<Long,ImagePhotoData>(2*_map20.size);
          long _key21;
          ImagePhotoData _val22;
          for (int _i23 = 0; _i23 < _map20.size; ++_i23)
          {
            _key21 = iprot.readI64();
            _val22 = new ImagePhotoData();
            _val22.read(iprot);
            struct.image_data.put(_key21, _val22);
          }
        }
        struct.setImage_dataIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.video_data = new HashMap<Long,VideoPhotoData>(2*_map24.size);
          long _key25;
          VideoPhotoData _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readI64();
            _val26 = new VideoPhotoData();
            _val26.read(iprot);
            struct.video_data.put(_key25, _val26);
          }
        }
        struct.setVideo_dataIsSet(true);
      }
    }
  }

}

