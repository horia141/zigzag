/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zigzag.common.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class PhotoData extends org.apache.thrift.TUnion<PhotoData, PhotoData._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhotoData");
  private static final org.apache.thrift.protocol.TField TOO_BIG_PHOTO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("too_big_photo_data", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_PHOTO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("image_photo_data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VIDEO_PHOTO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("video_photo_data", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOO_BIG_PHOTO_DATA((short)1, "too_big_photo_data"),
    IMAGE_PHOTO_DATA((short)2, "image_photo_data"),
    VIDEO_PHOTO_DATA((short)3, "video_photo_data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOO_BIG_PHOTO_DATA
          return TOO_BIG_PHOTO_DATA;
        case 2: // IMAGE_PHOTO_DATA
          return IMAGE_PHOTO_DATA;
        case 3: // VIDEO_PHOTO_DATA
          return VIDEO_PHOTO_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOO_BIG_PHOTO_DATA, new org.apache.thrift.meta_data.FieldMetaData("too_big_photo_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TooBigPhotoData.class)));
    tmpMap.put(_Fields.IMAGE_PHOTO_DATA, new org.apache.thrift.meta_data.FieldMetaData("image_photo_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePhotoData.class)));
    tmpMap.put(_Fields.VIDEO_PHOTO_DATA, new org.apache.thrift.meta_data.FieldMetaData("video_photo_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VideoPhotoData.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhotoData.class, metaDataMap);
  }

  public PhotoData() {
    super();
  }

  public PhotoData(_Fields setField, Object value) {
    super(setField, value);
  }

  public PhotoData(PhotoData other) {
    super(other);
  }
  public PhotoData deepCopy() {
    return new PhotoData(this);
  }

  public static PhotoData too_big_photo_data(TooBigPhotoData value) {
    PhotoData x = new PhotoData();
    x.setToo_big_photo_data(value);
    return x;
  }

  public static PhotoData image_photo_data(ImagePhotoData value) {
    PhotoData x = new PhotoData();
    x.setImage_photo_data(value);
    return x;
  }

  public static PhotoData video_photo_data(VideoPhotoData value) {
    PhotoData x = new PhotoData();
    x.setVideo_photo_data(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TOO_BIG_PHOTO_DATA:
        if (value instanceof TooBigPhotoData) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TooBigPhotoData for field 'too_big_photo_data', but got " + value.getClass().getSimpleName());
      case IMAGE_PHOTO_DATA:
        if (value instanceof ImagePhotoData) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ImagePhotoData for field 'image_photo_data', but got " + value.getClass().getSimpleName());
      case VIDEO_PHOTO_DATA:
        if (value instanceof VideoPhotoData) {
          break;
        }
        throw new ClassCastException("Was expecting value of type VideoPhotoData for field 'video_photo_data', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TOO_BIG_PHOTO_DATA:
          if (field.type == TOO_BIG_PHOTO_DATA_FIELD_DESC.type) {
            TooBigPhotoData too_big_photo_data;
            too_big_photo_data = new TooBigPhotoData();
            too_big_photo_data.read(iprot);
            return too_big_photo_data;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case IMAGE_PHOTO_DATA:
          if (field.type == IMAGE_PHOTO_DATA_FIELD_DESC.type) {
            ImagePhotoData image_photo_data;
            image_photo_data = new ImagePhotoData();
            image_photo_data.read(iprot);
            return image_photo_data;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case VIDEO_PHOTO_DATA:
          if (field.type == VIDEO_PHOTO_DATA_FIELD_DESC.type) {
            VideoPhotoData video_photo_data;
            video_photo_data = new VideoPhotoData();
            video_photo_data.read(iprot);
            return video_photo_data;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TOO_BIG_PHOTO_DATA:
        TooBigPhotoData too_big_photo_data = (TooBigPhotoData)value_;
        too_big_photo_data.write(oprot);
        return;
      case IMAGE_PHOTO_DATA:
        ImagePhotoData image_photo_data = (ImagePhotoData)value_;
        image_photo_data.write(oprot);
        return;
      case VIDEO_PHOTO_DATA:
        VideoPhotoData video_photo_data = (VideoPhotoData)value_;
        video_photo_data.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TOO_BIG_PHOTO_DATA:
          TooBigPhotoData too_big_photo_data;
          too_big_photo_data = new TooBigPhotoData();
          too_big_photo_data.read(iprot);
          return too_big_photo_data;
        case IMAGE_PHOTO_DATA:
          ImagePhotoData image_photo_data;
          image_photo_data = new ImagePhotoData();
          image_photo_data.read(iprot);
          return image_photo_data;
        case VIDEO_PHOTO_DATA:
          VideoPhotoData video_photo_data;
          video_photo_data = new VideoPhotoData();
          video_photo_data.read(iprot);
          return video_photo_data;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TOO_BIG_PHOTO_DATA:
        TooBigPhotoData too_big_photo_data = (TooBigPhotoData)value_;
        too_big_photo_data.write(oprot);
        return;
      case IMAGE_PHOTO_DATA:
        ImagePhotoData image_photo_data = (ImagePhotoData)value_;
        image_photo_data.write(oprot);
        return;
      case VIDEO_PHOTO_DATA:
        VideoPhotoData video_photo_data = (VideoPhotoData)value_;
        video_photo_data.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TOO_BIG_PHOTO_DATA:
        return TOO_BIG_PHOTO_DATA_FIELD_DESC;
      case IMAGE_PHOTO_DATA:
        return IMAGE_PHOTO_DATA_FIELD_DESC;
      case VIDEO_PHOTO_DATA:
        return VIDEO_PHOTO_DATA_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TooBigPhotoData getToo_big_photo_data() {
    if (getSetField() == _Fields.TOO_BIG_PHOTO_DATA) {
      return (TooBigPhotoData)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'too_big_photo_data' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setToo_big_photo_data(TooBigPhotoData value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TOO_BIG_PHOTO_DATA;
    value_ = value;
  }

  public ImagePhotoData getImage_photo_data() {
    if (getSetField() == _Fields.IMAGE_PHOTO_DATA) {
      return (ImagePhotoData)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'image_photo_data' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setImage_photo_data(ImagePhotoData value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.IMAGE_PHOTO_DATA;
    value_ = value;
  }

  public VideoPhotoData getVideo_photo_data() {
    if (getSetField() == _Fields.VIDEO_PHOTO_DATA) {
      return (VideoPhotoData)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'video_photo_data' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVideo_photo_data(VideoPhotoData value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.VIDEO_PHOTO_DATA;
    value_ = value;
  }

  public boolean isSetToo_big_photo_data() {
    return setField_ == _Fields.TOO_BIG_PHOTO_DATA;
  }


  public boolean isSetImage_photo_data() {
    return setField_ == _Fields.IMAGE_PHOTO_DATA;
  }


  public boolean isSetVideo_photo_data() {
    return setField_ == _Fields.VIDEO_PHOTO_DATA;
  }


  public boolean equals(Object other) {
    if (other instanceof PhotoData) {
      return equals((PhotoData)other);
    } else {
      return false;
    }
  }

  public boolean equals(PhotoData other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(PhotoData other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
