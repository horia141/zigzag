/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zigzag.common.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-10")
public class Generation implements org.apache.thrift.TBase<Generation, Generation._Fields>, java.io.Serializable, Cloneable, Comparable<Generation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Generation");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_STARTED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("date_started_ts", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_ENDED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("date_ended_ts", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GenerationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GenerationTupleSchemeFactory());
  }

  public long id; // required
  /**
   * 
   * @see GenerationStatus
   */
  public GenerationStatus status; // required
  public int date_started_ts; // required
  public int date_ended_ts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see GenerationStatus
     */
    STATUS((short)2, "status"),
    DATE_STARTED_TS((short)3, "date_started_ts"),
    DATE_ENDED_TS((short)4, "date_ended_ts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STATUS
          return STATUS;
        case 3: // DATE_STARTED_TS
          return DATE_STARTED_TS;
        case 4: // DATE_ENDED_TS
          return DATE_ENDED_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DATE_STARTED_TS_ISSET_ID = 1;
  private static final int __DATE_ENDED_TS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GenerationStatus.class)));
    tmpMap.put(_Fields.DATE_STARTED_TS, new org.apache.thrift.meta_data.FieldMetaData("date_started_ts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_ENDED_TS, new org.apache.thrift.meta_data.FieldMetaData("date_ended_ts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Generation.class, metaDataMap);
  }

  public Generation() {
  }

  public Generation(
    long id,
    GenerationStatus status,
    int date_started_ts,
    int date_ended_ts)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.status = status;
    this.date_started_ts = date_started_ts;
    setDate_started_tsIsSet(true);
    this.date_ended_ts = date_ended_ts;
    setDate_ended_tsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Generation(Generation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.date_started_ts = other.date_started_ts;
    this.date_ended_ts = other.date_ended_ts;
  }

  public Generation deepCopy() {
    return new Generation(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.status = null;
    setDate_started_tsIsSet(false);
    this.date_started_ts = 0;
    setDate_ended_tsIsSet(false);
    this.date_ended_ts = 0;
  }

  public long getId() {
    return this.id;
  }

  public Generation setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see GenerationStatus
   */
  public GenerationStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see GenerationStatus
   */
  public Generation setStatus(GenerationStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getDate_started_ts() {
    return this.date_started_ts;
  }

  public Generation setDate_started_ts(int date_started_ts) {
    this.date_started_ts = date_started_ts;
    setDate_started_tsIsSet(true);
    return this;
  }

  public void unsetDate_started_ts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_STARTED_TS_ISSET_ID);
  }

  /** Returns true if field date_started_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_started_ts() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_STARTED_TS_ISSET_ID);
  }

  public void setDate_started_tsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_STARTED_TS_ISSET_ID, value);
  }

  public int getDate_ended_ts() {
    return this.date_ended_ts;
  }

  public Generation setDate_ended_ts(int date_ended_ts) {
    this.date_ended_ts = date_ended_ts;
    setDate_ended_tsIsSet(true);
    return this;
  }

  public void unsetDate_ended_ts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ENDED_TS_ISSET_ID);
  }

  /** Returns true if field date_ended_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_ended_ts() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ENDED_TS_ISSET_ID);
  }

  public void setDate_ended_tsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ENDED_TS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((GenerationStatus)value);
      }
      break;

    case DATE_STARTED_TS:
      if (value == null) {
        unsetDate_started_ts();
      } else {
        setDate_started_ts((Integer)value);
      }
      break;

    case DATE_ENDED_TS:
      if (value == null) {
        unsetDate_ended_ts();
      } else {
        setDate_ended_ts((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case STATUS:
      return getStatus();

    case DATE_STARTED_TS:
      return Integer.valueOf(getDate_started_ts());

    case DATE_ENDED_TS:
      return Integer.valueOf(getDate_ended_ts());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STATUS:
      return isSetStatus();
    case DATE_STARTED_TS:
      return isSetDate_started_ts();
    case DATE_ENDED_TS:
      return isSetDate_ended_ts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Generation)
      return this.equals((Generation)that);
    return false;
  }

  public boolean equals(Generation that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_date_started_ts = true;
    boolean that_present_date_started_ts = true;
    if (this_present_date_started_ts || that_present_date_started_ts) {
      if (!(this_present_date_started_ts && that_present_date_started_ts))
        return false;
      if (this.date_started_ts != that.date_started_ts)
        return false;
    }

    boolean this_present_date_ended_ts = true;
    boolean that_present_date_ended_ts = true;
    if (this_present_date_ended_ts || that_present_date_ended_ts) {
      if (!(this_present_date_ended_ts && that_present_date_ended_ts))
        return false;
      if (this.date_ended_ts != that.date_ended_ts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_date_started_ts = true;
    list.add(present_date_started_ts);
    if (present_date_started_ts)
      list.add(date_started_ts);

    boolean present_date_ended_ts = true;
    list.add(present_date_ended_ts);
    if (present_date_ended_ts)
      list.add(date_ended_ts);

    return list.hashCode();
  }

  @Override
  public int compareTo(Generation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_started_ts()).compareTo(other.isSetDate_started_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_started_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_started_ts, other.date_started_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_ended_ts()).compareTo(other.isSetDate_ended_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_ended_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_ended_ts, other.date_ended_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Generation(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_started_ts:");
    sb.append(this.date_started_ts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_ended_ts:");
    sb.append(this.date_ended_ts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'date_started_ts' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'date_ended_ts' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GenerationStandardSchemeFactory implements SchemeFactory {
    public GenerationStandardScheme getScheme() {
      return new GenerationStandardScheme();
    }
  }

  private static class GenerationStandardScheme extends StandardScheme<Generation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Generation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.zigzag.common.model.GenerationStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE_STARTED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.date_started_ts = iprot.readI32();
              struct.setDate_started_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_ENDED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.date_ended_ts = iprot.readI32();
              struct.setDate_ended_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate_started_ts()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_started_ts' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate_ended_ts()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_ended_ts' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Generation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_STARTED_TS_FIELD_DESC);
      oprot.writeI32(struct.date_started_ts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_ENDED_TS_FIELD_DESC);
      oprot.writeI32(struct.date_ended_ts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GenerationTupleSchemeFactory implements SchemeFactory {
    public GenerationTupleScheme getScheme() {
      return new GenerationTupleScheme();
    }
  }

  private static class GenerationTupleScheme extends TupleScheme<Generation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Generation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI32(struct.status.getValue());
      oprot.writeI32(struct.date_started_ts);
      oprot.writeI32(struct.date_ended_ts);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Generation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.status = com.zigzag.common.model.GenerationStatus.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.date_started_ts = iprot.readI32();
      struct.setDate_started_tsIsSet(true);
      struct.date_ended_ts = iprot.readI32();
      struct.setDate_ended_tsIsSet(true);
    }
  }

}

