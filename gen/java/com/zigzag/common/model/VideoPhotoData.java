/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zigzag.common.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-10")
public class VideoPhotoData implements org.apache.thrift.TBase<VideoPhotoData, VideoPhotoData._Fields>, java.io.Serializable, Cloneable, Comparable<VideoPhotoData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VideoPhotoData");

  private static final org.apache.thrift.protocol.TField FIRST_FRAME_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("first_frame_desc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VIDEO_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("video_desc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_BETWEEN_FRAMES_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_between_frames_ms", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAMERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("framerate", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VideoPhotoDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VideoPhotoDataTupleSchemeFactory());
  }

  public TileData first_frame_desc; // required
  public TileData video_desc; // required
  public int time_between_frames_ms; // required
  public int framerate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_FRAME_DESC((short)1, "first_frame_desc"),
    VIDEO_DESC((short)2, "video_desc"),
    TIME_BETWEEN_FRAMES_MS((short)3, "time_between_frames_ms"),
    FRAMERATE((short)4, "framerate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_FRAME_DESC
          return FIRST_FRAME_DESC;
        case 2: // VIDEO_DESC
          return VIDEO_DESC;
        case 3: // TIME_BETWEEN_FRAMES_MS
          return TIME_BETWEEN_FRAMES_MS;
        case 4: // FRAMERATE
          return FRAMERATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_BETWEEN_FRAMES_MS_ISSET_ID = 0;
  private static final int __FRAMERATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_FRAME_DESC, new org.apache.thrift.meta_data.FieldMetaData("first_frame_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TileData")));
    tmpMap.put(_Fields.VIDEO_DESC, new org.apache.thrift.meta_data.FieldMetaData("video_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TileData")));
    tmpMap.put(_Fields.TIME_BETWEEN_FRAMES_MS, new org.apache.thrift.meta_data.FieldMetaData("time_between_frames_ms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAMERATE, new org.apache.thrift.meta_data.FieldMetaData("framerate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VideoPhotoData.class, metaDataMap);
  }

  public VideoPhotoData() {
  }

  public VideoPhotoData(
    TileData first_frame_desc,
    TileData video_desc,
    int time_between_frames_ms,
    int framerate)
  {
    this();
    this.first_frame_desc = first_frame_desc;
    this.video_desc = video_desc;
    this.time_between_frames_ms = time_between_frames_ms;
    setTime_between_frames_msIsSet(true);
    this.framerate = framerate;
    setFramerateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VideoPhotoData(VideoPhotoData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirst_frame_desc()) {
      this.first_frame_desc = other.first_frame_desc;
    }
    if (other.isSetVideo_desc()) {
      this.video_desc = other.video_desc;
    }
    this.time_between_frames_ms = other.time_between_frames_ms;
    this.framerate = other.framerate;
  }

  public VideoPhotoData deepCopy() {
    return new VideoPhotoData(this);
  }

  @Override
  public void clear() {
    this.first_frame_desc = null;
    this.video_desc = null;
    setTime_between_frames_msIsSet(false);
    this.time_between_frames_ms = 0;
    setFramerateIsSet(false);
    this.framerate = 0;
  }

  public TileData getFirst_frame_desc() {
    return this.first_frame_desc;
  }

  public VideoPhotoData setFirst_frame_desc(TileData first_frame_desc) {
    this.first_frame_desc = first_frame_desc;
    return this;
  }

  public void unsetFirst_frame_desc() {
    this.first_frame_desc = null;
  }

  /** Returns true if field first_frame_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_frame_desc() {
    return this.first_frame_desc != null;
  }

  public void setFirst_frame_descIsSet(boolean value) {
    if (!value) {
      this.first_frame_desc = null;
    }
  }

  public TileData getVideo_desc() {
    return this.video_desc;
  }

  public VideoPhotoData setVideo_desc(TileData video_desc) {
    this.video_desc = video_desc;
    return this;
  }

  public void unsetVideo_desc() {
    this.video_desc = null;
  }

  /** Returns true if field video_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetVideo_desc() {
    return this.video_desc != null;
  }

  public void setVideo_descIsSet(boolean value) {
    if (!value) {
      this.video_desc = null;
    }
  }

  public int getTime_between_frames_ms() {
    return this.time_between_frames_ms;
  }

  public VideoPhotoData setTime_between_frames_ms(int time_between_frames_ms) {
    this.time_between_frames_ms = time_between_frames_ms;
    setTime_between_frames_msIsSet(true);
    return this;
  }

  public void unsetTime_between_frames_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_BETWEEN_FRAMES_MS_ISSET_ID);
  }

  /** Returns true if field time_between_frames_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_between_frames_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_BETWEEN_FRAMES_MS_ISSET_ID);
  }

  public void setTime_between_frames_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_BETWEEN_FRAMES_MS_ISSET_ID, value);
  }

  public int getFramerate() {
    return this.framerate;
  }

  public VideoPhotoData setFramerate(int framerate) {
    this.framerate = framerate;
    setFramerateIsSet(true);
    return this;
  }

  public void unsetFramerate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMERATE_ISSET_ID);
  }

  /** Returns true if field framerate is set (has been assigned a value) and false otherwise */
  public boolean isSetFramerate() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMERATE_ISSET_ID);
  }

  public void setFramerateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMERATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_FRAME_DESC:
      if (value == null) {
        unsetFirst_frame_desc();
      } else {
        setFirst_frame_desc((TileData)value);
      }
      break;

    case VIDEO_DESC:
      if (value == null) {
        unsetVideo_desc();
      } else {
        setVideo_desc((TileData)value);
      }
      break;

    case TIME_BETWEEN_FRAMES_MS:
      if (value == null) {
        unsetTime_between_frames_ms();
      } else {
        setTime_between_frames_ms((Integer)value);
      }
      break;

    case FRAMERATE:
      if (value == null) {
        unsetFramerate();
      } else {
        setFramerate((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_FRAME_DESC:
      return getFirst_frame_desc();

    case VIDEO_DESC:
      return getVideo_desc();

    case TIME_BETWEEN_FRAMES_MS:
      return Integer.valueOf(getTime_between_frames_ms());

    case FRAMERATE:
      return Integer.valueOf(getFramerate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_FRAME_DESC:
      return isSetFirst_frame_desc();
    case VIDEO_DESC:
      return isSetVideo_desc();
    case TIME_BETWEEN_FRAMES_MS:
      return isSetTime_between_frames_ms();
    case FRAMERATE:
      return isSetFramerate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VideoPhotoData)
      return this.equals((VideoPhotoData)that);
    return false;
  }

  public boolean equals(VideoPhotoData that) {
    if (that == null)
      return false;

    boolean this_present_first_frame_desc = true && this.isSetFirst_frame_desc();
    boolean that_present_first_frame_desc = true && that.isSetFirst_frame_desc();
    if (this_present_first_frame_desc || that_present_first_frame_desc) {
      if (!(this_present_first_frame_desc && that_present_first_frame_desc))
        return false;
      if (!this.first_frame_desc.equals(that.first_frame_desc))
        return false;
    }

    boolean this_present_video_desc = true && this.isSetVideo_desc();
    boolean that_present_video_desc = true && that.isSetVideo_desc();
    if (this_present_video_desc || that_present_video_desc) {
      if (!(this_present_video_desc && that_present_video_desc))
        return false;
      if (!this.video_desc.equals(that.video_desc))
        return false;
    }

    boolean this_present_time_between_frames_ms = true;
    boolean that_present_time_between_frames_ms = true;
    if (this_present_time_between_frames_ms || that_present_time_between_frames_ms) {
      if (!(this_present_time_between_frames_ms && that_present_time_between_frames_ms))
        return false;
      if (this.time_between_frames_ms != that.time_between_frames_ms)
        return false;
    }

    boolean this_present_framerate = true;
    boolean that_present_framerate = true;
    if (this_present_framerate || that_present_framerate) {
      if (!(this_present_framerate && that_present_framerate))
        return false;
      if (this.framerate != that.framerate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_first_frame_desc = true && (isSetFirst_frame_desc());
    list.add(present_first_frame_desc);
    if (present_first_frame_desc)
      list.add(first_frame_desc);

    boolean present_video_desc = true && (isSetVideo_desc());
    list.add(present_video_desc);
    if (present_video_desc)
      list.add(video_desc);

    boolean present_time_between_frames_ms = true;
    list.add(present_time_between_frames_ms);
    if (present_time_between_frames_ms)
      list.add(time_between_frames_ms);

    boolean present_framerate = true;
    list.add(present_framerate);
    if (present_framerate)
      list.add(framerate);

    return list.hashCode();
  }

  @Override
  public int compareTo(VideoPhotoData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirst_frame_desc()).compareTo(other.isSetFirst_frame_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_frame_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_frame_desc, other.first_frame_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideo_desc()).compareTo(other.isSetVideo_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideo_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.video_desc, other.video_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_between_frames_ms()).compareTo(other.isSetTime_between_frames_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_between_frames_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_between_frames_ms, other.time_between_frames_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFramerate()).compareTo(other.isSetFramerate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFramerate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.framerate, other.framerate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VideoPhotoData(");
    boolean first = true;

    sb.append("first_frame_desc:");
    if (this.first_frame_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.first_frame_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("video_desc:");
    if (this.video_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.video_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time_between_frames_ms:");
    sb.append(this.time_between_frames_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("framerate:");
    sb.append(this.framerate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (first_frame_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'first_frame_desc' was not present! Struct: " + toString());
    }
    if (video_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'video_desc' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'time_between_frames_ms' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'framerate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VideoPhotoDataStandardSchemeFactory implements SchemeFactory {
    public VideoPhotoDataStandardScheme getScheme() {
      return new VideoPhotoDataStandardScheme();
    }
  }

  private static class VideoPhotoDataStandardScheme extends StandardScheme<VideoPhotoData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VideoPhotoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_FRAME_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.first_frame_desc = new TileData();
              struct.first_frame_desc.read(iprot);
              struct.setFirst_frame_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIDEO_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.video_desc = new TileData();
              struct.video_desc.read(iprot);
              struct.setVideo_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_BETWEEN_FRAMES_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time_between_frames_ms = iprot.readI32();
              struct.setTime_between_frames_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAMERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.framerate = iprot.readI32();
              struct.setFramerateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime_between_frames_ms()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time_between_frames_ms' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFramerate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'framerate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VideoPhotoData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.first_frame_desc != null) {
        oprot.writeFieldBegin(FIRST_FRAME_DESC_FIELD_DESC);
        struct.first_frame_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.video_desc != null) {
        oprot.writeFieldBegin(VIDEO_DESC_FIELD_DESC);
        struct.video_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_BETWEEN_FRAMES_MS_FIELD_DESC);
      oprot.writeI32(struct.time_between_frames_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAMERATE_FIELD_DESC);
      oprot.writeI32(struct.framerate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VideoPhotoDataTupleSchemeFactory implements SchemeFactory {
    public VideoPhotoDataTupleScheme getScheme() {
      return new VideoPhotoDataTupleScheme();
    }
  }

  private static class VideoPhotoDataTupleScheme extends TupleScheme<VideoPhotoData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VideoPhotoData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.first_frame_desc.write(oprot);
      struct.video_desc.write(oprot);
      oprot.writeI32(struct.time_between_frames_ms);
      oprot.writeI32(struct.framerate);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VideoPhotoData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.first_frame_desc = new TileData();
      struct.first_frame_desc.read(iprot);
      struct.setFirst_frame_descIsSet(true);
      struct.video_desc = new TileData();
      struct.video_desc.read(iprot);
      struct.setVideo_descIsSet(true);
      struct.time_between_frames_ms = iprot.readI32();
      struct.setTime_between_frames_msIsSet(true);
      struct.framerate = iprot.readI32();
      struct.setFramerateIsSet(true);
    }
  }

}

